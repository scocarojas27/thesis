{"ast":null,"code":"// Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\nimport regexSupplant from '../lib/regexSupplant';\nimport validateUrlUnicodeSubDomainSegment from './validateUrlUnicodeSubDomainSegment';\nimport validateUrlUnicodeDomainSegment from './validateUrlUnicodeDomainSegment';\nimport validateUrlUnicodeDomainTld from './validateUrlUnicodeDomainTld'; // Unencoded internationalized domains - this doesn't check for invalid UTF-8 sequences\n\nvar validateUrlUnicodeDomain = regexSupplant(/(?:(?:#{validateUrlUnicodeSubDomainSegment}\\.)*(?:#{validateUrlUnicodeDomainSegment}\\.)#{validateUrlUnicodeDomainTld})/i, {\n  validateUrlUnicodeSubDomainSegment: validateUrlUnicodeSubDomainSegment,\n  validateUrlUnicodeDomainSegment: validateUrlUnicodeDomainSegment,\n  validateUrlUnicodeDomainTld: validateUrlUnicodeDomainTld\n});\nexport default validateUrlUnicodeDomain;","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/node_modules/twitter-text/dist/esm/regexp/validateUrlUnicodeDomain.js"],"names":["regexSupplant","validateUrlUnicodeSubDomainSegment","validateUrlUnicodeDomainSegment","validateUrlUnicodeDomainTld","validateUrlUnicodeDomain"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,sBAA1B;AACA,OAAOC,kCAAP,MAA+C,sCAA/C;AACA,OAAOC,+BAAP,MAA4C,mCAA5C;AACA,OAAOC,2BAAP,MAAwC,+BAAxC,C,CAAyE;;AAEzE,IAAIC,wBAAwB,GAAGJ,aAAa,CAAC,yHAAD,EAA4H;AACtKC,EAAAA,kCAAkC,EAAEA,kCADkI;AAEtKC,EAAAA,+BAA+B,EAAEA,+BAFqI;AAGtKC,EAAAA,2BAA2B,EAAEA;AAHyI,CAA5H,CAA5C;AAKA,eAAeC,wBAAf","sourcesContent":["// Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\nimport regexSupplant from '../lib/regexSupplant';\nimport validateUrlUnicodeSubDomainSegment from './validateUrlUnicodeSubDomainSegment';\nimport validateUrlUnicodeDomainSegment from './validateUrlUnicodeDomainSegment';\nimport validateUrlUnicodeDomainTld from './validateUrlUnicodeDomainTld'; // Unencoded internationalized domains - this doesn't check for invalid UTF-8 sequences\n\nvar validateUrlUnicodeDomain = regexSupplant(/(?:(?:#{validateUrlUnicodeSubDomainSegment}\\.)*(?:#{validateUrlUnicodeDomainSegment}\\.)#{validateUrlUnicodeDomainTld})/i, {\n  validateUrlUnicodeSubDomainSegment: validateUrlUnicodeSubDomainSegment,\n  validateUrlUnicodeDomainSegment: validateUrlUnicodeDomainSegment,\n  validateUrlUnicodeDomainTld: validateUrlUnicodeDomainTld\n});\nexport default validateUrlUnicodeDomain;"]},"metadata":{},"sourceType":"module"}