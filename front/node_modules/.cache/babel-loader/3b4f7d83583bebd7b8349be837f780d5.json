{"ast":null,"code":"import \"core-js/modules/es6.array.sort\"; // Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n\nexport default function (text, entities, indicesInUTF16) {\n  if (entities.length == 0) {\n    return;\n  }\n\n  var charIndex = 0;\n  var codePointIndex = 0; // sort entities by start index\n\n  entities.sort(function (a, b) {\n    return a.indices[0] - b.indices[0];\n  });\n  var entityIndex = 0;\n  var entity = entities[0];\n\n  while (charIndex < text.length) {\n    if (entity.indices[0] == (indicesInUTF16 ? charIndex : codePointIndex)) {\n      var len = entity.indices[1] - entity.indices[0];\n      entity.indices[0] = indicesInUTF16 ? codePointIndex : charIndex;\n      entity.indices[1] = entity.indices[0] + len;\n      entityIndex++;\n\n      if (entityIndex == entities.length) {\n        // no more entity\n        break;\n      }\n\n      entity = entities[entityIndex];\n    }\n\n    var c = text.charCodeAt(charIndex);\n\n    if (c >= 0xd800 && c <= 0xdbff && charIndex < text.length - 1) {\n      // Found high surrogate char\n      c = text.charCodeAt(charIndex + 1);\n\n      if (c >= 0xdc00 && c <= 0xdfff) {\n        // Found surrogate pair\n        charIndex++;\n      }\n    }\n\n    codePointIndex++;\n    charIndex++;\n  }\n}","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/front/node_modules/twitter-text/dist/esm/convertUnicodeIndices.js"],"names":["text","entities","indicesInUTF16","length","charIndex","codePointIndex","sort","a","b","indices","entityIndex","entity","len","c","charCodeAt"],"mappings":"AAAA,OAAO,gCAAP,C,CACA;AACA;AACA;;AACA,eAAe,UAAUA,IAAV,EAAgBC,QAAhB,EAA0BC,cAA1B,EAA0C;AACvD,MAAID,QAAQ,CAACE,MAAT,IAAmB,CAAvB,EAA0B;AACxB;AACD;;AAED,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,cAAc,GAAG,CAArB,CANuD,CAM/B;;AAExBJ,EAAAA,QAAQ,CAACK,IAAT,CAAc,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC5B,WAAOD,CAAC,CAACE,OAAF,CAAU,CAAV,IAAeD,CAAC,CAACC,OAAF,CAAU,CAAV,CAAtB;AACD,GAFD;AAGA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,MAAM,GAAGV,QAAQ,CAAC,CAAD,CAArB;;AAEA,SAAOG,SAAS,GAAGJ,IAAI,CAACG,MAAxB,EAAgC;AAC9B,QAAIQ,MAAM,CAACF,OAAP,CAAe,CAAf,MAAsBP,cAAc,GAAGE,SAAH,GAAeC,cAAnD,CAAJ,EAAwE;AACtE,UAAIO,GAAG,GAAGD,MAAM,CAACF,OAAP,CAAe,CAAf,IAAoBE,MAAM,CAACF,OAAP,CAAe,CAAf,CAA9B;AACAE,MAAAA,MAAM,CAACF,OAAP,CAAe,CAAf,IAAoBP,cAAc,GAAGG,cAAH,GAAoBD,SAAtD;AACAO,MAAAA,MAAM,CAACF,OAAP,CAAe,CAAf,IAAoBE,MAAM,CAACF,OAAP,CAAe,CAAf,IAAoBG,GAAxC;AACAF,MAAAA,WAAW;;AAEX,UAAIA,WAAW,IAAIT,QAAQ,CAACE,MAA5B,EAAoC;AAClC;AACA;AACD;;AAEDQ,MAAAA,MAAM,GAAGV,QAAQ,CAACS,WAAD,CAAjB;AACD;;AAED,QAAIG,CAAC,GAAGb,IAAI,CAACc,UAAL,CAAgBV,SAAhB,CAAR;;AAEA,QAAIS,CAAC,IAAI,MAAL,IAAeA,CAAC,IAAI,MAApB,IAA8BT,SAAS,GAAGJ,IAAI,CAACG,MAAL,GAAc,CAA5D,EAA+D;AAC7D;AACAU,MAAAA,CAAC,GAAGb,IAAI,CAACc,UAAL,CAAgBV,SAAS,GAAG,CAA5B,CAAJ;;AAEA,UAAIS,CAAC,IAAI,MAAL,IAAeA,CAAC,IAAI,MAAxB,EAAgC;AAC9B;AACAT,QAAAA,SAAS;AACV;AACF;;AAEDC,IAAAA,cAAc;AACdD,IAAAA,SAAS;AACV;AACF","sourcesContent":["import \"core-js/modules/es6.array.sort\";\n// Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\nexport default function (text, entities, indicesInUTF16) {\n  if (entities.length == 0) {\n    return;\n  }\n\n  var charIndex = 0;\n  var codePointIndex = 0; // sort entities by start index\n\n  entities.sort(function (a, b) {\n    return a.indices[0] - b.indices[0];\n  });\n  var entityIndex = 0;\n  var entity = entities[0];\n\n  while (charIndex < text.length) {\n    if (entity.indices[0] == (indicesInUTF16 ? charIndex : codePointIndex)) {\n      var len = entity.indices[1] - entity.indices[0];\n      entity.indices[0] = indicesInUTF16 ? codePointIndex : charIndex;\n      entity.indices[1] = entity.indices[0] + len;\n      entityIndex++;\n\n      if (entityIndex == entities.length) {\n        // no more entity\n        break;\n      }\n\n      entity = entities[entityIndex];\n    }\n\n    var c = text.charCodeAt(charIndex);\n\n    if (c >= 0xd800 && c <= 0xdbff && charIndex < text.length - 1) {\n      // Found high surrogate char\n      c = text.charCodeAt(charIndex + 1);\n\n      if (c >= 0xdc00 && c <= 0xdfff) {\n        // Found surrogate pair\n        charIndex++;\n      }\n    }\n\n    codePointIndex++;\n    charIndex++;\n  }\n}"]},"metadata":{},"sourceType":"module"}