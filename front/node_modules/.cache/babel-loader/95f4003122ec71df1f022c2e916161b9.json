{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar StreamFileStore = /*#__PURE__*/function () {\n  function StreamFileStore(client, token) {\n    (0, _classCallCheck2.default)(this, StreamFileStore);\n    this.client = client;\n    this.token = token;\n  } // React Native does not auto-detect MIME type, you need to pass that via contentType\n  // param. If you don't then Android will refuse to perform the upload\n\n\n  (0, _createClass2.default)(StreamFileStore, [{\n    key: \"upload\",\n    value: function upload(uri, name, contentType, onUploadProgress) {\n      /**\n       * upload a File instance or a readable stream of data\n       * @param {File|Buffer|string} uri - File object or Buffer or URI\n       * @param {string} [name] - file name\n       * @param {string} [contentType] - mime-type\n       * @param {function} [onUploadProgress] - browser only, Function that is called with upload progress\n       * @return {Promise}\n       */\n      return this.client.upload('files/', uri, name, contentType, onUploadProgress);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(uri) {\n      return this.client.delete({\n        url: \"files/\",\n        qs: {\n          url: uri\n        },\n        signature: this.token\n      });\n    }\n  }]);\n  return StreamFileStore;\n}();\n\nexports.default = StreamFileStore;","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/front/node_modules/getstream/lib/lib/files.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classCallCheck2","_createClass2","StreamFileStore","client","token","key","upload","uri","name","contentType","onUploadProgress","_delete","delete","url","qs","signature"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,gBAAgB,GAAGP,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAA7C;;AAEA,IAAIO,aAAa,GAAGR,sBAAsB,CAACC,OAAO,CAAC,oCAAD,CAAR,CAA1C;;AAEA,IAAIQ,eAAe,GAAG,aAAa,YAAY;AAC7C,WAASA,eAAT,CAAyBC,MAAzB,EAAiCC,KAAjC,EAAwC;AACtC,KAAC,GAAGJ,gBAAgB,CAACD,OAArB,EAA8B,IAA9B,EAAoCG,eAApC;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD,GAL4C,CAK3C;AACF;;;AAGA,GAAC,GAAGH,aAAa,CAACF,OAAlB,EAA2BG,eAA3B,EAA4C,CAAC;AAC3CG,IAAAA,GAAG,EAAE,QADsC;AAE3CP,IAAAA,KAAK,EAAE,SAASQ,MAAT,CAAgBC,GAAhB,EAAqBC,IAArB,EAA2BC,WAA3B,EAAwCC,gBAAxC,EAA0D;AAC/D;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACM,aAAO,KAAKP,MAAL,CAAYG,MAAZ,CAAmB,QAAnB,EAA6BC,GAA7B,EAAkCC,IAAlC,EAAwCC,WAAxC,EAAqDC,gBAArD,CAAP;AACD;AAZ0C,GAAD,EAazC;AACDL,IAAAA,GAAG,EAAE,QADJ;AAEDP,IAAAA,KAAK,EAAE,SAASa,OAAT,CAAiBJ,GAAjB,EAAsB;AAC3B,aAAO,KAAKJ,MAAL,CAAYS,MAAZ,CAAmB;AACxBC,QAAAA,GAAG,EAAE,QADmB;AAExBC,QAAAA,EAAE,EAAE;AACFD,UAAAA,GAAG,EAAEN;AADH,SAFoB;AAKxBQ,QAAAA,SAAS,EAAE,KAAKX;AALQ,OAAnB,CAAP;AAOD;AAVA,GAbyC,CAA5C;AAyBA,SAAOF,eAAP;AACD,CAnCkC,EAAnC;;AAqCAL,OAAO,CAACE,OAAR,GAAkBG,eAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar StreamFileStore = /*#__PURE__*/function () {\n  function StreamFileStore(client, token) {\n    (0, _classCallCheck2.default)(this, StreamFileStore);\n    this.client = client;\n    this.token = token;\n  } // React Native does not auto-detect MIME type, you need to pass that via contentType\n  // param. If you don't then Android will refuse to perform the upload\n\n\n  (0, _createClass2.default)(StreamFileStore, [{\n    key: \"upload\",\n    value: function upload(uri, name, contentType, onUploadProgress) {\n      /**\n       * upload a File instance or a readable stream of data\n       * @param {File|Buffer|string} uri - File object or Buffer or URI\n       * @param {string} [name] - file name\n       * @param {string} [contentType] - mime-type\n       * @param {function} [onUploadProgress] - browser only, Function that is called with upload progress\n       * @return {Promise}\n       */\n      return this.client.upload('files/', uri, name, contentType, onUploadProgress);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(uri) {\n      return this.client.delete({\n        url: \"files/\",\n        qs: {\n          url: uri\n        },\n        signature: this.token\n      });\n    }\n  }]);\n  return StreamFileStore;\n}();\n\nexports.default = StreamFileStore;"]},"metadata":{},"sourceType":"script"}