{"ast":null,"code":"'use strict';\n\nvar Event = {\n  _registry: [],\n  on: function (element, eventName, callback, context) {\n    var wrapped = function () {\n      callback.call(context);\n    };\n\n    if (element.addEventListener) element.addEventListener(eventName, wrapped, false);else element.attachEvent('on' + eventName, wrapped);\n\n    this._registry.push({\n      _element: element,\n      _type: eventName,\n      _callback: callback,\n      _context: context,\n      _handler: wrapped\n    });\n  },\n  detach: function (element, eventName, callback, context) {\n    var i = this._registry.length,\n        register;\n\n    while (i--) {\n      register = this._registry[i];\n      if (element && element !== register._element || eventName && eventName !== register._type || callback && callback !== register._callback || context && context !== register._context) continue;\n      if (register._element.removeEventListener) register._element.removeEventListener(register._type, register._handler, false);else register._element.detachEvent('on' + register._type, register._handler);\n\n      this._registry.splice(i, 1);\n\n      register = null;\n    }\n  }\n};\nif (global.onunload !== undefined) Event.on(global, 'unload', Event.detach, Event);\nmodule.exports = {\n  Event: Event\n};","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/node_modules/faye/src/util/browser/event.js"],"names":["Event","_registry","on","element","eventName","callback","context","wrapped","call","addEventListener","attachEvent","push","_element","_type","_callback","_context","_handler","detach","i","length","register","removeEventListener","detachEvent","splice","global","onunload","undefined","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAG;AACVC,EAAAA,SAAS,EAAE,EADD;AAGVC,EAAAA,EAAE,EAAE,UAASC,OAAT,EAAkBC,SAAlB,EAA6BC,QAA7B,EAAuCC,OAAvC,EAAgD;AAClD,QAAIC,OAAO,GAAG,YAAW;AAAEF,MAAAA,QAAQ,CAACG,IAAT,CAAcF,OAAd;AAAwB,KAAnD;;AAEA,QAAIH,OAAO,CAACM,gBAAZ,EACEN,OAAO,CAACM,gBAAR,CAAyBL,SAAzB,EAAoCG,OAApC,EAA6C,KAA7C,EADF,KAGEJ,OAAO,CAACO,WAAR,CAAoB,OAAON,SAA3B,EAAsCG,OAAtC;;AAEF,SAAKN,SAAL,CAAeU,IAAf,CAAoB;AAClBC,MAAAA,QAAQ,EAAIT,OADM;AAElBU,MAAAA,KAAK,EAAOT,SAFM;AAGlBU,MAAAA,SAAS,EAAGT,QAHM;AAIlBU,MAAAA,QAAQ,EAAMT,OAJI;AAKlBU,MAAAA,QAAQ,EAAIT;AALM,KAApB;AAOD,GAlBS;AAoBVU,EAAAA,MAAM,EAAE,UAASd,OAAT,EAAkBC,SAAlB,EAA6BC,QAA7B,EAAuCC,OAAvC,EAAgD;AACtD,QAAIY,CAAC,GAAG,KAAKjB,SAAL,CAAekB,MAAvB;AAAA,QAA+BC,QAA/B;;AACA,WAAOF,CAAC,EAAR,EAAY;AACVE,MAAAA,QAAQ,GAAG,KAAKnB,SAAL,CAAeiB,CAAf,CAAX;AAEA,UAAKf,OAAO,IAAOA,OAAO,KAAQiB,QAAQ,CAACR,QAAvC,IACCR,SAAS,IAAKA,SAAS,KAAMgB,QAAQ,CAACP,KADvC,IAECR,QAAQ,IAAMA,QAAQ,KAAOe,QAAQ,CAACN,SAFvC,IAGCR,OAAO,IAAOA,OAAO,KAAQc,QAAQ,CAACL,QAH3C,EAIE;AAEF,UAAIK,QAAQ,CAACR,QAAT,CAAkBS,mBAAtB,EACED,QAAQ,CAACR,QAAT,CAAkBS,mBAAlB,CAAsCD,QAAQ,CAACP,KAA/C,EAAsDO,QAAQ,CAACJ,QAA/D,EAAyE,KAAzE,EADF,KAGEI,QAAQ,CAACR,QAAT,CAAkBU,WAAlB,CAA8B,OAAOF,QAAQ,CAACP,KAA9C,EAAqDO,QAAQ,CAACJ,QAA9D;;AAEF,WAAKf,SAAL,CAAesB,MAAf,CAAsBL,CAAtB,EAAwB,CAAxB;;AACAE,MAAAA,QAAQ,GAAG,IAAX;AACD;AACF;AAvCS,CAAZ;AA0CA,IAAII,MAAM,CAACC,QAAP,KAAoBC,SAAxB,EACE1B,KAAK,CAACE,EAAN,CAASsB,MAAT,EAAiB,QAAjB,EAA2BxB,KAAK,CAACiB,MAAjC,EAAyCjB,KAAzC;AAEF2B,MAAM,CAACC,OAAP,GAAiB;AACf5B,EAAAA,KAAK,EAAEA;AADQ,CAAjB","sourcesContent":["'use strict';\n\nvar Event = {\n  _registry: [],\n\n  on: function(element, eventName, callback, context) {\n    var wrapped = function() { callback.call(context) };\n\n    if (element.addEventListener)\n      element.addEventListener(eventName, wrapped, false);\n    else\n      element.attachEvent('on' + eventName, wrapped);\n\n    this._registry.push({\n      _element:   element,\n      _type:      eventName,\n      _callback:  callback,\n      _context:     context,\n      _handler:   wrapped\n    });\n  },\n\n  detach: function(element, eventName, callback, context) {\n    var i = this._registry.length, register;\n    while (i--) {\n      register = this._registry[i];\n\n      if ((element    && element    !== register._element)  ||\n          (eventName  && eventName  !== register._type)     ||\n          (callback   && callback   !== register._callback) ||\n          (context    && context    !== register._context))\n        continue;\n\n      if (register._element.removeEventListener)\n        register._element.removeEventListener(register._type, register._handler, false);\n      else\n        register._element.detachEvent('on' + register._type, register._handler);\n\n      this._registry.splice(i,1);\n      register = null;\n    }\n  }\n};\n\nif (global.onunload !== undefined)\n  Event.on(global, 'unload', Event.detach, Event);\n\nmodule.exports = {\n  Event: Event\n};\n"]},"metadata":{},"sourceType":"script"}