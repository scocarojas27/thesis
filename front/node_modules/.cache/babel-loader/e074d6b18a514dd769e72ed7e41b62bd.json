{"ast":null,"code":"import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.regexp.replace\"; // Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n\nimport htmlEscape from './htmlEscape';\nimport stringSupplant from './lib/stringSupplant';\nexport default function (entity, options) {\n  var displayUrl = entity.display_url;\n  var expandedUrl = entity.expanded_url; // Goal: If a user copies and pastes a tweet containing t.co'ed link, the resulting paste\n  // should contain the full original URL (expanded_url), not the display URL.\n  //\n  // Method: Whenever possible, we actually emit HTML that contains expanded_url, and use\n  // font-size:0 to hide those parts that should not be displayed (because they are not part of display_url).\n  // Elements with font-size:0 get copied even though they are not visible.\n  // Note that display:none doesn't work here. Elements with display:none don't get copied.\n  //\n  // Additionally, we want to *display* ellipses, but we don't want them copied.  To make this happen we\n  // wrap the ellipses in a tco-ellipsis class and provide an onCopy handler that sets display:none on\n  // everything with the tco-ellipsis class.\n  //\n  // Exception: pic.twitter.com images, for which expandedUrl = \"https://twitter.com/#!/username/status/1234/photo/1\n  // For those URLs, display_url is not a substring of expanded_url, so we don't do anything special to render the elided parts.\n  // For a pic.twitter.com URL, the only elided part will be the \"https://\", so this is fine.\n\n  var displayUrlSansEllipses = displayUrl.replace(/…/g, ''); // We have to disregard ellipses for matching\n  // Note: we currently only support eliding parts of the URL at the beginning or the end.\n  // Eventually we may want to elide parts of the URL in the *middle*.  If so, this code will\n  // become more complicated.  We will probably want to create a regexp out of display URL,\n  // replacing every ellipsis with a \".*\".\n\n  if (expandedUrl.indexOf(displayUrlSansEllipses) != -1) {\n    var displayUrlIndex = expandedUrl.indexOf(displayUrlSansEllipses);\n    var v = {\n      displayUrlSansEllipses: displayUrlSansEllipses,\n      // Portion of expandedUrl that precedes the displayUrl substring\n      beforeDisplayUrl: expandedUrl.substr(0, displayUrlIndex),\n      // Portion of expandedUrl that comes after displayUrl\n      afterDisplayUrl: expandedUrl.substr(displayUrlIndex + displayUrlSansEllipses.length),\n      precedingEllipsis: displayUrl.match(/^…/) ? '…' : '',\n      followingEllipsis: displayUrl.match(/…$/) ? '…' : ''\n    };\n\n    for (var k in v) {\n      if (v.hasOwnProperty(k)) {\n        v[k] = htmlEscape(v[k]);\n      }\n    } // As an example: The user tweets \"hi http://longdomainname.com/foo\"\n    // This gets shortened to \"hi http://t.co/xyzabc\", with display_url = \"…nname.com/foo\"\n    // This will get rendered as:\n    // <span class='tco-ellipsis'> <!-- This stuff should get displayed but not copied -->\n    //   …\n    //   <!-- There's a chance the onCopy event handler might not fire. In case that happens,\n    //        we include an &nbsp; here so that the … doesn't bump up against the URL and ruin it.\n    //        The &nbsp; is inside the tco-ellipsis span so that when the onCopy handler *does*\n    //        fire, it doesn't get copied.  Otherwise the copied text would have two spaces in a row,\n    //        e.g. \"hi  http://longdomainname.com/foo\".\n    //   <span style='font-size:0'>&nbsp;</span>\n    // </span>\n    // <span style='font-size:0'>  <!-- This stuff should get copied but not displayed -->\n    //   http://longdomai\n    // </span>\n    // <span class='js-display-url'> <!-- This stuff should get displayed *and* copied -->\n    //   nname.com/foo\n    // </span>\n    // <span class='tco-ellipsis'> <!-- This stuff should get displayed but not copied -->\n    //   <span style='font-size:0'>&nbsp;</span>\n    //   …\n    // </span>\n\n\n    v['invisible'] = options.invisibleTagAttrs;\n    return stringSupplant(\"<span class='tco-ellipsis'>#{precedingEllipsis}<span #{invisible}>&nbsp;</span></span><span #{invisible}>#{beforeDisplayUrl}</span><span class='js-display-url'>#{displayUrlSansEllipses}</span><span #{invisible}>#{afterDisplayUrl}</span><span class='tco-ellipsis'><span #{invisible}>&nbsp;</span>#{followingEllipsis}</span>\", v);\n  }\n\n  return displayUrl;\n}","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/front/node_modules/twitter-text/dist/esm/linkTextWithEntity.js"],"names":["htmlEscape","stringSupplant","entity","options","displayUrl","display_url","expandedUrl","expanded_url","displayUrlSansEllipses","replace","indexOf","displayUrlIndex","v","beforeDisplayUrl","substr","afterDisplayUrl","length","precedingEllipsis","match","followingEllipsis","k","hasOwnProperty","invisibleTagAttrs"],"mappings":"AAAA,OAAO,kCAAP;AACA,OAAO,oCAAP;AACA,OAAO,oCAAP,C,CACA;AACA;AACA;;AACA,OAAOA,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,eAAe,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AACxC,MAAIC,UAAU,GAAGF,MAAM,CAACG,WAAxB;AACA,MAAIC,WAAW,GAAGJ,MAAM,CAACK,YAAzB,CAFwC,CAED;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,sBAAsB,GAAGJ,UAAU,CAACK,OAAX,CAAmB,IAAnB,EAAyB,EAAzB,CAA7B,CAlBwC,CAkBmB;AAC3D;AACA;AACA;AACA;;AAEA,MAAIH,WAAW,CAACI,OAAZ,CAAoBF,sBAApB,KAA+C,CAAC,CAApD,EAAuD;AACrD,QAAIG,eAAe,GAAGL,WAAW,CAACI,OAAZ,CAAoBF,sBAApB,CAAtB;AACA,QAAII,CAAC,GAAG;AACNJ,MAAAA,sBAAsB,EAAEA,sBADlB;AAEN;AACAK,MAAAA,gBAAgB,EAAEP,WAAW,CAACQ,MAAZ,CAAmB,CAAnB,EAAsBH,eAAtB,CAHZ;AAIN;AACAI,MAAAA,eAAe,EAAET,WAAW,CAACQ,MAAZ,CAAmBH,eAAe,GAAGH,sBAAsB,CAACQ,MAA5D,CALX;AAMNC,MAAAA,iBAAiB,EAAEb,UAAU,CAACc,KAAX,CAAiB,IAAjB,IAAyB,GAAzB,GAA+B,EAN5C;AAONC,MAAAA,iBAAiB,EAAEf,UAAU,CAACc,KAAX,CAAiB,IAAjB,IAAyB,GAAzB,GAA+B;AAP5C,KAAR;;AAUA,SAAK,IAAIE,CAAT,IAAcR,CAAd,EAAiB;AACf,UAAIA,CAAC,CAACS,cAAF,CAAiBD,CAAjB,CAAJ,EAAyB;AACvBR,QAAAA,CAAC,CAACQ,CAAD,CAAD,GAAOpB,UAAU,CAACY,CAAC,CAACQ,CAAD,CAAF,CAAjB;AACD;AACF,KAhBoD,CAgBnD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAR,IAAAA,CAAC,CAAC,WAAD,CAAD,GAAiBT,OAAO,CAACmB,iBAAzB;AACA,WAAOrB,cAAc,CAAC,oUAAD,EAAuUW,CAAvU,CAArB;AACD;;AAED,SAAOR,UAAP;AACD","sourcesContent":["import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.regexp.replace\";\n// Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\nimport htmlEscape from './htmlEscape';\nimport stringSupplant from './lib/stringSupplant';\nexport default function (entity, options) {\n  var displayUrl = entity.display_url;\n  var expandedUrl = entity.expanded_url; // Goal: If a user copies and pastes a tweet containing t.co'ed link, the resulting paste\n  // should contain the full original URL (expanded_url), not the display URL.\n  //\n  // Method: Whenever possible, we actually emit HTML that contains expanded_url, and use\n  // font-size:0 to hide those parts that should not be displayed (because they are not part of display_url).\n  // Elements with font-size:0 get copied even though they are not visible.\n  // Note that display:none doesn't work here. Elements with display:none don't get copied.\n  //\n  // Additionally, we want to *display* ellipses, but we don't want them copied.  To make this happen we\n  // wrap the ellipses in a tco-ellipsis class and provide an onCopy handler that sets display:none on\n  // everything with the tco-ellipsis class.\n  //\n  // Exception: pic.twitter.com images, for which expandedUrl = \"https://twitter.com/#!/username/status/1234/photo/1\n  // For those URLs, display_url is not a substring of expanded_url, so we don't do anything special to render the elided parts.\n  // For a pic.twitter.com URL, the only elided part will be the \"https://\", so this is fine.\n\n  var displayUrlSansEllipses = displayUrl.replace(/…/g, ''); // We have to disregard ellipses for matching\n  // Note: we currently only support eliding parts of the URL at the beginning or the end.\n  // Eventually we may want to elide parts of the URL in the *middle*.  If so, this code will\n  // become more complicated.  We will probably want to create a regexp out of display URL,\n  // replacing every ellipsis with a \".*\".\n\n  if (expandedUrl.indexOf(displayUrlSansEllipses) != -1) {\n    var displayUrlIndex = expandedUrl.indexOf(displayUrlSansEllipses);\n    var v = {\n      displayUrlSansEllipses: displayUrlSansEllipses,\n      // Portion of expandedUrl that precedes the displayUrl substring\n      beforeDisplayUrl: expandedUrl.substr(0, displayUrlIndex),\n      // Portion of expandedUrl that comes after displayUrl\n      afterDisplayUrl: expandedUrl.substr(displayUrlIndex + displayUrlSansEllipses.length),\n      precedingEllipsis: displayUrl.match(/^…/) ? '…' : '',\n      followingEllipsis: displayUrl.match(/…$/) ? '…' : ''\n    };\n\n    for (var k in v) {\n      if (v.hasOwnProperty(k)) {\n        v[k] = htmlEscape(v[k]);\n      }\n    } // As an example: The user tweets \"hi http://longdomainname.com/foo\"\n    // This gets shortened to \"hi http://t.co/xyzabc\", with display_url = \"…nname.com/foo\"\n    // This will get rendered as:\n    // <span class='tco-ellipsis'> <!-- This stuff should get displayed but not copied -->\n    //   …\n    //   <!-- There's a chance the onCopy event handler might not fire. In case that happens,\n    //        we include an &nbsp; here so that the … doesn't bump up against the URL and ruin it.\n    //        The &nbsp; is inside the tco-ellipsis span so that when the onCopy handler *does*\n    //        fire, it doesn't get copied.  Otherwise the copied text would have two spaces in a row,\n    //        e.g. \"hi  http://longdomainname.com/foo\".\n    //   <span style='font-size:0'>&nbsp;</span>\n    // </span>\n    // <span style='font-size:0'>  <!-- This stuff should get copied but not displayed -->\n    //   http://longdomai\n    // </span>\n    // <span class='js-display-url'> <!-- This stuff should get displayed *and* copied -->\n    //   nname.com/foo\n    // </span>\n    // <span class='tco-ellipsis'> <!-- This stuff should get displayed but not copied -->\n    //   <span style='font-size:0'>&nbsp;</span>\n    //   …\n    // </span>\n\n\n    v['invisible'] = options.invisibleTagAttrs;\n    return stringSupplant(\"<span class='tco-ellipsis'>#{precedingEllipsis}<span #{invisible}>&nbsp;</span></span><span #{invisible}>#{beforeDisplayUrl}</span><span class='js-display-url'>#{displayUrlSansEllipses}</span><span #{invisible}>#{afterDisplayUrl}</span><span class='tco-ellipsis'><span #{invisible}>&nbsp;</span>#{followingEllipsis}</span>\", v);\n  }\n\n  return displayUrl;\n}"]},"metadata":{},"sourceType":"module"}