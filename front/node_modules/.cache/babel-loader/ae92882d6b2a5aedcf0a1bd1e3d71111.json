{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createRedirectUrl;\n\nvar _url = _interopRequireDefault(require(\"url\"));\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\nvar _errors = _interopRequireDefault(require(\"./errors\"));\n\nvar _utils = _interopRequireDefault(require(\"./utils\"));\n\nvar _signing = _interopRequireDefault(require(\"./signing\"));\n\nfunction createRedirectUrl(targetUrl, userId, events) {\n  /**\n   * Creates a redirect url for tracking the given events in the context of\n   * an email using Stream's analytics platform. Learn more at\n   * getstream.io/personalization\n   * @method createRedirectUrl\n   * @memberof StreamClient.prototype\n   * @param  {string} targetUrl Target url\n   * @param  {string} userId    User id to track\n   * @param  {array} events     List of events to track\n   * @return {string}           The redirect url\n   */\n  var uri = _url.default.parse(targetUrl);\n\n  if (!(uri.host || uri.hostname && uri.port) && !uri.isUnix) {\n    throw new _errors.default.MissingSchemaError(\"Invalid URI: \\\"\".concat(_url.default.format(uri), \"\\\"\"));\n  }\n\n  var authToken = _signing.default.JWTScopeToken(this.apiSecret, 'redirect_and_track', '*', {\n    userId: '*',\n    expireTokens: this.expireTokens\n  });\n\n  var analyticsUrl = \"\".concat(this.baseAnalyticsUrl, \"redirect/\");\n  var kwargs = {\n    auth_type: 'jwt',\n    authorization: authToken,\n    url: targetUrl,\n    api_key: this.apiKey,\n    events: JSON.stringify(events)\n  };\n\n  var qString = _utils.default.rfc3986(_qs.default.stringify(kwargs, null, null, {}));\n\n  return \"\".concat(analyticsUrl, \"?\").concat(qString);\n}","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/front/node_modules/getstream/lib/lib/redirect_url.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","createRedirectUrl","_url","_qs","_errors","_utils","_signing","targetUrl","userId","events","uri","parse","host","hostname","port","isUnix","MissingSchemaError","concat","format","authToken","JWTScopeToken","apiSecret","expireTokens","analyticsUrl","baseAnalyticsUrl","kwargs","auth_type","authorization","url","api_key","apiKey","JSON","stringify","qString","rfc3986"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,iBAAlB;;AAEA,IAAIC,IAAI,GAAGR,sBAAsB,CAACC,OAAO,CAAC,KAAD,CAAR,CAAjC;;AAEA,IAAIQ,GAAG,GAAGT,sBAAsB,CAACC,OAAO,CAAC,IAAD,CAAR,CAAhC;;AAEA,IAAIS,OAAO,GAAGV,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAIU,MAAM,GAAGX,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAAnC;;AAEA,IAAIW,QAAQ,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAArC;;AAEA,SAASM,iBAAT,CAA2BM,SAA3B,EAAsCC,MAAtC,EAA8CC,MAA9C,EAAsD;AACpD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,MAAIC,GAAG,GAAGR,IAAI,CAACF,OAAL,CAAaW,KAAb,CAAmBJ,SAAnB,CAAV;;AAEA,MAAI,EAAEG,GAAG,CAACE,IAAJ,IAAYF,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACI,IAAlC,KAA2C,CAACJ,GAAG,CAACK,MAApD,EAA4D;AAC1D,UAAM,IAAIX,OAAO,CAACJ,OAAR,CAAgBgB,kBAApB,CAAuC,kBAAkBC,MAAlB,CAAyBf,IAAI,CAACF,OAAL,CAAakB,MAAb,CAAoBR,GAApB,CAAzB,EAAmD,IAAnD,CAAvC,CAAN;AACD;;AAED,MAAIS,SAAS,GAAGb,QAAQ,CAACN,OAAT,CAAiBoB,aAAjB,CAA+B,KAAKC,SAApC,EAA+C,oBAA/C,EAAqE,GAArE,EAA0E;AACxFb,IAAAA,MAAM,EAAE,GADgF;AAExFc,IAAAA,YAAY,EAAE,KAAKA;AAFqE,GAA1E,CAAhB;;AAKA,MAAIC,YAAY,GAAG,GAAGN,MAAH,CAAU,KAAKO,gBAAf,EAAiC,WAAjC,CAAnB;AACA,MAAIC,MAAM,GAAG;AACXC,IAAAA,SAAS,EAAE,KADA;AAEXC,IAAAA,aAAa,EAAER,SAFJ;AAGXS,IAAAA,GAAG,EAAErB,SAHM;AAIXsB,IAAAA,OAAO,EAAE,KAAKC,MAJH;AAKXrB,IAAAA,MAAM,EAAEsB,IAAI,CAACC,SAAL,CAAevB,MAAf;AALG,GAAb;;AAQA,MAAIwB,OAAO,GAAG5B,MAAM,CAACL,OAAP,CAAekC,OAAf,CAAuB/B,GAAG,CAACH,OAAJ,CAAYgC,SAAZ,CAAsBP,MAAtB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,EAA1C,CAAvB,CAAd;;AAEA,SAAO,GAAGR,MAAH,CAAUM,YAAV,EAAwB,GAAxB,EAA6BN,MAA7B,CAAoCgB,OAApC,CAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createRedirectUrl;\n\nvar _url = _interopRequireDefault(require(\"url\"));\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\nvar _errors = _interopRequireDefault(require(\"./errors\"));\n\nvar _utils = _interopRequireDefault(require(\"./utils\"));\n\nvar _signing = _interopRequireDefault(require(\"./signing\"));\n\nfunction createRedirectUrl(targetUrl, userId, events) {\n  /**\n   * Creates a redirect url for tracking the given events in the context of\n   * an email using Stream's analytics platform. Learn more at\n   * getstream.io/personalization\n   * @method createRedirectUrl\n   * @memberof StreamClient.prototype\n   * @param  {string} targetUrl Target url\n   * @param  {string} userId    User id to track\n   * @param  {array} events     List of events to track\n   * @return {string}           The redirect url\n   */\n  var uri = _url.default.parse(targetUrl);\n\n  if (!(uri.host || uri.hostname && uri.port) && !uri.isUnix) {\n    throw new _errors.default.MissingSchemaError(\"Invalid URI: \\\"\".concat(_url.default.format(uri), \"\\\"\"));\n  }\n\n  var authToken = _signing.default.JWTScopeToken(this.apiSecret, 'redirect_and_track', '*', {\n    userId: '*',\n    expireTokens: this.expireTokens\n  });\n\n  var analyticsUrl = \"\".concat(this.baseAnalyticsUrl, \"redirect/\");\n  var kwargs = {\n    auth_type: 'jwt',\n    authorization: authToken,\n    url: targetUrl,\n    api_key: this.apiKey,\n    events: JSON.stringify(events)\n  };\n\n  var qString = _utils.default.rfc3986(_qs.default.stringify(kwargs, null, null, {}));\n\n  return \"\".concat(analyticsUrl, \"?\").concat(qString);\n}"]},"metadata":{},"sourceType":"script"}