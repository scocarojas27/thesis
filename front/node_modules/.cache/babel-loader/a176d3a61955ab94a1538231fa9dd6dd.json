{"ast":null,"code":"import \"core-js/modules/es6.array.reduce\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\"; // Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n\nimport configs from './configs';\nimport extractUrlsWithIndices from './extractUrlsWithIndices';\nimport getCharacterWeight from './lib/getCharacterWeight';\nimport hasInvalidCharacters from './hasInvalidCharacters';\nimport modifyIndicesFromUTF16ToUnicode from './modifyIndicesFromUTF16ToUnicode'; // TODO: WEB-19861 Replace with public package after it is open sourced\n\nimport { parse as extractEmojiWithIndices } from 'twemoji-parser';\nimport urlHasHttps from './regexp/urlHasHttps';\n/**\n * [parseTweet description]\n * @param  {string} text tweet text to parse\n * @param  {Object} options config options to pass\n * @return {Object} Fields in response described below:\n *\n * Response fields:\n * weightedLength {int} the weighted length of tweet based on weights specified in the config\n * valid {bool} If tweet is valid\n * permillage {float} permillage of the tweet over the max length specified in config\n * validRangeStart {int} beginning of valid text\n * validRangeEnd {int} End index of valid part of the tweet text (inclusive) in utf16\n * displayRangeStart {int} beginning index of display text\n * displayRangeEnd {int} end index of display text (inclusive) in utf16\n */\n\nvar parseTweet = function parseTweet() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : configs.defaults;\n  var mergedOptions = Object.keys(options).length ? options : configs.defaults;\n  var defaultWeight = mergedOptions.defaultWeight,\n      emojiParsingEnabled = mergedOptions.emojiParsingEnabled,\n      scale = mergedOptions.scale,\n      maxWeightedTweetLength = mergedOptions.maxWeightedTweetLength,\n      transformedURLLength = mergedOptions.transformedURLLength;\n  var normalizedText = typeof String.prototype.normalize === 'function' ? text.normalize() : text; // Hash all entities by their startIndex for fast lookup\n\n  var urlEntitiesMap = transformEntitiesToHash(extractUrlsWithIndices(normalizedText));\n  var emojiEntitiesMap = emojiParsingEnabled ? transformEntitiesToHash(extractEmojiWithIndices(normalizedText)) : [];\n  var tweetLength = normalizedText.length;\n  var weightedLength = 0;\n  var validDisplayIndex = 0;\n  var valid = true; // Go through every character and calculate weight\n\n  for (var charIndex = 0; charIndex < tweetLength; charIndex++) {\n    // If a url begins at the specified index handle, add constant length\n    if (urlEntitiesMap[charIndex]) {\n      var _urlEntitiesMap$charI = urlEntitiesMap[charIndex],\n          url = _urlEntitiesMap$charI.url,\n          indices = _urlEntitiesMap$charI.indices;\n      weightedLength += transformedURLLength * scale;\n      charIndex += url.length - 1;\n    } else if (emojiParsingEnabled && emojiEntitiesMap[charIndex]) {\n      var _emojiEntitiesMap$cha = emojiEntitiesMap[charIndex],\n          emoji = _emojiEntitiesMap$cha.text,\n          _indices = _emojiEntitiesMap$cha.indices;\n      weightedLength += defaultWeight;\n      charIndex += emoji.length - 1;\n    } else {\n      charIndex += isSurrogatePair(normalizedText, charIndex) ? 1 : 0;\n      weightedLength += getCharacterWeight(normalizedText.charAt(charIndex), mergedOptions);\n    } // Only test for validity of character if it is still valid\n\n\n    if (valid) {\n      valid = !hasInvalidCharacters(normalizedText.substring(charIndex, charIndex + 1));\n    }\n\n    if (valid && weightedLength <= maxWeightedTweetLength * scale) {\n      validDisplayIndex = charIndex;\n    }\n  }\n\n  weightedLength = weightedLength / scale;\n  valid = valid && weightedLength > 0 && weightedLength <= maxWeightedTweetLength;\n  var permillage = Math.floor(weightedLength / maxWeightedTweetLength * 1000);\n  var normalizationOffset = text.length - normalizedText.length;\n  validDisplayIndex += normalizationOffset;\n  return {\n    weightedLength: weightedLength,\n    valid: valid,\n    permillage: permillage,\n    validRangeStart: 0,\n    validRangeEnd: validDisplayIndex,\n    displayRangeStart: 0,\n    displayRangeEnd: text.length > 0 ? text.length - 1 : 0\n  };\n};\n\nvar transformEntitiesToHash = function transformEntitiesToHash(entities) {\n  return entities.reduce(function (map, entity) {\n    map[entity.indices[0]] = entity;\n    return map;\n  }, {});\n};\n\nvar isSurrogatePair = function isSurrogatePair(text, cIndex) {\n  // Test if a character is the beginning of a surrogate pair\n  if (cIndex < text.length - 1) {\n    var c = text.charCodeAt(cIndex);\n    var cNext = text.charCodeAt(cIndex + 1);\n    return 0xd800 <= c && c <= 0xdbff && 0xdc00 <= cNext && cNext <= 0xdfff;\n  }\n\n  return false;\n};\n\nexport default parseTweet;","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/node_modules/twitter-text/dist/esm/parseTweet.js"],"names":["configs","extractUrlsWithIndices","getCharacterWeight","hasInvalidCharacters","modifyIndicesFromUTF16ToUnicode","parse","extractEmojiWithIndices","urlHasHttps","parseTweet","text","arguments","length","undefined","options","defaults","mergedOptions","Object","keys","defaultWeight","emojiParsingEnabled","scale","maxWeightedTweetLength","transformedURLLength","normalizedText","String","prototype","normalize","urlEntitiesMap","transformEntitiesToHash","emojiEntitiesMap","tweetLength","weightedLength","validDisplayIndex","valid","charIndex","_urlEntitiesMap$charI","url","indices","_emojiEntitiesMap$cha","emoji","_indices","isSurrogatePair","charAt","substring","permillage","Math","floor","normalizationOffset","validRangeStart","validRangeEnd","displayRangeStart","displayRangeEnd","entities","reduce","map","entity","cIndex","c","charCodeAt","cNext"],"mappings":"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","sourcesContent":["import \"core-js/modules/es6.array.reduce\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\n// Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\nimport configs from './configs';\nimport extractUrlsWithIndices from './extractUrlsWithIndices';\nimport getCharacterWeight from './lib/getCharacterWeight';\nimport hasInvalidCharacters from './hasInvalidCharacters';\nimport modifyIndicesFromUTF16ToUnicode from './modifyIndicesFromUTF16ToUnicode'; // TODO: WEB-19861 Replace with public package after it is open sourced\n\nimport { parse as extractEmojiWithIndices } from 'twemoji-parser';\nimport urlHasHttps from './regexp/urlHasHttps';\n/**\n * [parseTweet description]\n * @param  {string} text tweet text to parse\n * @param  {Object} options config options to pass\n * @return {Object} Fields in response described below:\n *\n * Response fields:\n * weightedLength {int} the weighted length of tweet based on weights specified in the config\n * valid {bool} If tweet is valid\n * permillage {float} permillage of the tweet over the max length specified in config\n * validRangeStart {int} beginning of valid text\n * validRangeEnd {int} End index of valid part of the tweet text (inclusive) in utf16\n * displayRangeStart {int} beginning index of display text\n * displayRangeEnd {int} end index of display text (inclusive) in utf16\n */\n\nvar parseTweet = function parseTweet() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : configs.defaults;\n  var mergedOptions = Object.keys(options).length ? options : configs.defaults;\n  var defaultWeight = mergedOptions.defaultWeight,\n      emojiParsingEnabled = mergedOptions.emojiParsingEnabled,\n      scale = mergedOptions.scale,\n      maxWeightedTweetLength = mergedOptions.maxWeightedTweetLength,\n      transformedURLLength = mergedOptions.transformedURLLength;\n  var normalizedText = typeof String.prototype.normalize === 'function' ? text.normalize() : text; // Hash all entities by their startIndex for fast lookup\n\n  var urlEntitiesMap = transformEntitiesToHash(extractUrlsWithIndices(normalizedText));\n  var emojiEntitiesMap = emojiParsingEnabled ? transformEntitiesToHash(extractEmojiWithIndices(normalizedText)) : [];\n  var tweetLength = normalizedText.length;\n  var weightedLength = 0;\n  var validDisplayIndex = 0;\n  var valid = true; // Go through every character and calculate weight\n\n  for (var charIndex = 0; charIndex < tweetLength; charIndex++) {\n    // If a url begins at the specified index handle, add constant length\n    if (urlEntitiesMap[charIndex]) {\n      var _urlEntitiesMap$charI = urlEntitiesMap[charIndex],\n          url = _urlEntitiesMap$charI.url,\n          indices = _urlEntitiesMap$charI.indices;\n      weightedLength += transformedURLLength * scale;\n      charIndex += url.length - 1;\n    } else if (emojiParsingEnabled && emojiEntitiesMap[charIndex]) {\n      var _emojiEntitiesMap$cha = emojiEntitiesMap[charIndex],\n          emoji = _emojiEntitiesMap$cha.text,\n          _indices = _emojiEntitiesMap$cha.indices;\n      weightedLength += defaultWeight;\n      charIndex += emoji.length - 1;\n    } else {\n      charIndex += isSurrogatePair(normalizedText, charIndex) ? 1 : 0;\n      weightedLength += getCharacterWeight(normalizedText.charAt(charIndex), mergedOptions);\n    } // Only test for validity of character if it is still valid\n\n\n    if (valid) {\n      valid = !hasInvalidCharacters(normalizedText.substring(charIndex, charIndex + 1));\n    }\n\n    if (valid && weightedLength <= maxWeightedTweetLength * scale) {\n      validDisplayIndex = charIndex;\n    }\n  }\n\n  weightedLength = weightedLength / scale;\n  valid = valid && weightedLength > 0 && weightedLength <= maxWeightedTweetLength;\n  var permillage = Math.floor(weightedLength / maxWeightedTweetLength * 1000);\n  var normalizationOffset = text.length - normalizedText.length;\n  validDisplayIndex += normalizationOffset;\n  return {\n    weightedLength: weightedLength,\n    valid: valid,\n    permillage: permillage,\n    validRangeStart: 0,\n    validRangeEnd: validDisplayIndex,\n    displayRangeStart: 0,\n    displayRangeEnd: text.length > 0 ? text.length - 1 : 0\n  };\n};\n\nvar transformEntitiesToHash = function transformEntitiesToHash(entities) {\n  return entities.reduce(function (map, entity) {\n    map[entity.indices[0]] = entity;\n    return map;\n  }, {});\n};\n\nvar isSurrogatePair = function isSurrogatePair(text, cIndex) {\n  // Test if a character is the beginning of a surrogate pair\n  if (cIndex < text.length - 1) {\n    var c = text.charCodeAt(cIndex);\n    var cNext = text.charCodeAt(cIndex + 1);\n    return 0xd800 <= c && c <= 0xdbff && 0xdc00 <= cNext && cNext <= 0xdfff;\n  }\n\n  return false;\n};\n\nexport default parseTweet;"]},"metadata":{},"sourceType":"module"}