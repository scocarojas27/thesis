{"ast":null,"code":"import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\"; // Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n\nimport endHashtagMatch from './regexp/endHashtagMatch';\nimport extractUrlsWithIndices from './extractUrlsWithIndices';\nimport hashSigns from './regexp/hashSigns';\nimport removeOverlappingEntities from './removeOverlappingEntities';\nimport validHashtag from './regexp/validHashtag';\n\nvar extractHashtagsWithIndices = function extractHashtagsWithIndices(text, options) {\n  if (!options) {\n    options = {\n      checkUrlOverlap: true\n    };\n  }\n\n  if (!text || !text.match(hashSigns)) {\n    return [];\n  }\n\n  var tags = [];\n  text.replace(validHashtag, function (match, before, hash, hashText, offset, chunk) {\n    var after = chunk.slice(offset + match.length);\n\n    if (after.match(endHashtagMatch)) {\n      return;\n    }\n\n    var startPosition = offset + before.length;\n    var endPosition = startPosition + hashText.length + 1;\n    tags.push({\n      hashtag: hashText,\n      indices: [startPosition, endPosition]\n    });\n  });\n\n  if (options.checkUrlOverlap) {\n    // also extract URL entities\n    var urls = extractUrlsWithIndices(text);\n\n    if (urls.length > 0) {\n      var entities = tags.concat(urls); // remove overlap\n\n      removeOverlappingEntities(entities); // only push back hashtags\n\n      tags = [];\n\n      for (var i = 0; i < entities.length; i++) {\n        if (entities[i].hashtag) {\n          tags.push(entities[i]);\n        }\n      }\n    }\n  }\n\n  return tags;\n};\n\nexport default extractHashtagsWithIndices;","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/front/node_modules/twitter-text/dist/esm/extractHashtagsWithIndices.js"],"names":["endHashtagMatch","extractUrlsWithIndices","hashSigns","removeOverlappingEntities","validHashtag","extractHashtagsWithIndices","text","options","checkUrlOverlap","match","tags","replace","before","hash","hashText","offset","chunk","after","slice","length","startPosition","endPosition","push","hashtag","indices","urls","entities","concat","i"],"mappings":"AAAA,OAAO,oCAAP;AACA,OAAO,kCAAP,C,CACA;AACA;AACA;;AACA,OAAOA,eAAP,MAA4B,0BAA5B;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;AAEA,IAAIC,0BAA0B,GAAG,SAASA,0BAAT,CAAoCC,IAApC,EAA0CC,OAA1C,EAAmD;AAClF,MAAI,CAACA,OAAL,EAAc;AACZA,IAAAA,OAAO,GAAG;AACRC,MAAAA,eAAe,EAAE;AADT,KAAV;AAGD;;AAED,MAAI,CAACF,IAAD,IAAS,CAACA,IAAI,CAACG,KAAL,CAAWP,SAAX,CAAd,EAAqC;AACnC,WAAO,EAAP;AACD;;AAED,MAAIQ,IAAI,GAAG,EAAX;AACAJ,EAAAA,IAAI,CAACK,OAAL,CAAaP,YAAb,EAA2B,UAAUK,KAAV,EAAiBG,MAAjB,EAAyBC,IAAzB,EAA+BC,QAA/B,EAAyCC,MAAzC,EAAiDC,KAAjD,EAAwD;AACjF,QAAIC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAYH,MAAM,GAAGN,KAAK,CAACU,MAA3B,CAAZ;;AAEA,QAAIF,KAAK,CAACR,KAAN,CAAYT,eAAZ,CAAJ,EAAkC;AAChC;AACD;;AAED,QAAIoB,aAAa,GAAGL,MAAM,GAAGH,MAAM,CAACO,MAApC;AACA,QAAIE,WAAW,GAAGD,aAAa,GAAGN,QAAQ,CAACK,MAAzB,GAAkC,CAApD;AACAT,IAAAA,IAAI,CAACY,IAAL,CAAU;AACRC,MAAAA,OAAO,EAAET,QADD;AAERU,MAAAA,OAAO,EAAE,CAACJ,aAAD,EAAgBC,WAAhB;AAFD,KAAV;AAID,GAbD;;AAeA,MAAId,OAAO,CAACC,eAAZ,EAA6B;AAC3B;AACA,QAAIiB,IAAI,GAAGxB,sBAAsB,CAACK,IAAD,CAAjC;;AAEA,QAAImB,IAAI,CAACN,MAAL,GAAc,CAAlB,EAAqB;AACnB,UAAIO,QAAQ,GAAGhB,IAAI,CAACiB,MAAL,CAAYF,IAAZ,CAAf,CADmB,CACe;;AAElCtB,MAAAA,yBAAyB,CAACuB,QAAD,CAAzB,CAHmB,CAGkB;;AAErChB,MAAAA,IAAI,GAAG,EAAP;;AAEA,WAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACP,MAA7B,EAAqCS,CAAC,EAAtC,EAA0C;AACxC,YAAIF,QAAQ,CAACE,CAAD,CAAR,CAAYL,OAAhB,EAAyB;AACvBb,UAAAA,IAAI,CAACY,IAAL,CAAUI,QAAQ,CAACE,CAAD,CAAlB;AACD;AACF;AACF;AACF;;AAED,SAAOlB,IAAP;AACD,CA/CD;;AAiDA,eAAeL,0BAAf","sourcesContent":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\n// Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\nimport endHashtagMatch from './regexp/endHashtagMatch';\nimport extractUrlsWithIndices from './extractUrlsWithIndices';\nimport hashSigns from './regexp/hashSigns';\nimport removeOverlappingEntities from './removeOverlappingEntities';\nimport validHashtag from './regexp/validHashtag';\n\nvar extractHashtagsWithIndices = function extractHashtagsWithIndices(text, options) {\n  if (!options) {\n    options = {\n      checkUrlOverlap: true\n    };\n  }\n\n  if (!text || !text.match(hashSigns)) {\n    return [];\n  }\n\n  var tags = [];\n  text.replace(validHashtag, function (match, before, hash, hashText, offset, chunk) {\n    var after = chunk.slice(offset + match.length);\n\n    if (after.match(endHashtagMatch)) {\n      return;\n    }\n\n    var startPosition = offset + before.length;\n    var endPosition = startPosition + hashText.length + 1;\n    tags.push({\n      hashtag: hashText,\n      indices: [startPosition, endPosition]\n    });\n  });\n\n  if (options.checkUrlOverlap) {\n    // also extract URL entities\n    var urls = extractUrlsWithIndices(text);\n\n    if (urls.length > 0) {\n      var entities = tags.concat(urls); // remove overlap\n\n      removeOverlappingEntities(entities); // only push back hashtags\n\n      tags = [];\n\n      for (var i = 0; i < entities.length; i++) {\n        if (entities[i].hashtag) {\n          tags.push(entities[i]);\n        }\n      }\n    }\n  }\n\n  return tags;\n};\n\nexport default extractHashtagsWithIndices;"]},"metadata":{},"sourceType":"module"}