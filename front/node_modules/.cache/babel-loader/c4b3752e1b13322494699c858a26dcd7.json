{"ast":null,"code":"import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.match\"; // Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n\nimport validateUrlAuthority from './regexp/validateUrlAuthority';\nimport validateUrlFragment from './regexp/validateUrlFragment';\nimport validateUrlPath from './regexp/validateUrlPath';\nimport validateUrlQuery from './regexp/validateUrlQuery';\nimport validateUrlScheme from './regexp/validateUrlScheme';\nimport validateUrlUnencoded from './regexp/validateUrlUnencoded';\nimport validateUrlUnicodeAuthority from './regexp/validateUrlUnicodeAuthority';\n\nfunction isValidMatch(string, regex, optional) {\n  if (!optional) {\n    // RegExp[\"$&\"] is the text of the last match\n    // blank strings are ok, but are falsy, so we check stringiness instead of truthiness\n    return typeof string === 'string' && string.match(regex) && RegExp['$&'] === string;\n  } // RegExp[\"$&\"] is the text of the last match\n\n\n  return !string || string.match(regex) && RegExp['$&'] === string;\n}\n\nexport default function (url, unicodeDomains, requireProtocol) {\n  if (unicodeDomains == null) {\n    unicodeDomains = true;\n  }\n\n  if (requireProtocol == null) {\n    requireProtocol = true;\n  }\n\n  if (!url) {\n    return false;\n  }\n\n  var urlParts = url.match(validateUrlUnencoded);\n\n  if (!urlParts || urlParts[0] !== url) {\n    return false;\n  }\n\n  var scheme = urlParts[1],\n      authority = urlParts[2],\n      path = urlParts[3],\n      query = urlParts[4],\n      fragment = urlParts[5];\n\n  if (!((!requireProtocol || isValidMatch(scheme, validateUrlScheme) && scheme.match(/^https?$/i)) && isValidMatch(path, validateUrlPath) && isValidMatch(query, validateUrlQuery, true) && isValidMatch(fragment, validateUrlFragment, true))) {\n    return false;\n  }\n\n  return unicodeDomains && isValidMatch(authority, validateUrlUnicodeAuthority) || !unicodeDomains && isValidMatch(authority, validateUrlAuthority);\n}","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/node_modules/twitter-text/dist/esm/isValidUrl.js"],"names":["validateUrlAuthority","validateUrlFragment","validateUrlPath","validateUrlQuery","validateUrlScheme","validateUrlUnencoded","validateUrlUnicodeAuthority","isValidMatch","string","regex","optional","match","RegExp","url","unicodeDomains","requireProtocol","urlParts","scheme","authority","path","query","fragment"],"mappings":"AAAA,OAAO,wCAAP;AACA,OAAO,kCAAP,C,CACA;AACA;AACA;;AACA,OAAOA,oBAAP,MAAiC,+BAAjC;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,OAAOC,2BAAP,MAAwC,sCAAxC;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,QAArC,EAA+C;AAC7C,MAAI,CAACA,QAAL,EAAe;AACb;AACA;AACA,WAAO,OAAOF,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACG,KAAP,CAAaF,KAAb,CAA9B,IAAqDG,MAAM,CAAC,IAAD,CAAN,KAAiBJ,MAA7E;AACD,GAL4C,CAK3C;;;AAGF,SAAO,CAACA,MAAD,IAAWA,MAAM,CAACG,KAAP,CAAaF,KAAb,KAAuBG,MAAM,CAAC,IAAD,CAAN,KAAiBJ,MAA1D;AACD;;AAED,eAAe,UAAUK,GAAV,EAAeC,cAAf,EAA+BC,eAA/B,EAAgD;AAC7D,MAAID,cAAc,IAAI,IAAtB,EAA4B;AAC1BA,IAAAA,cAAc,GAAG,IAAjB;AACD;;AAED,MAAIC,eAAe,IAAI,IAAvB,EAA6B;AAC3BA,IAAAA,eAAe,GAAG,IAAlB;AACD;;AAED,MAAI,CAACF,GAAL,EAAU;AACR,WAAO,KAAP;AACD;;AAED,MAAIG,QAAQ,GAAGH,GAAG,CAACF,KAAJ,CAAUN,oBAAV,CAAf;;AAEA,MAAI,CAACW,QAAD,IAAaA,QAAQ,CAAC,CAAD,CAAR,KAAgBH,GAAjC,EAAsC;AACpC,WAAO,KAAP;AACD;;AAED,MAAII,MAAM,GAAGD,QAAQ,CAAC,CAAD,CAArB;AAAA,MACIE,SAAS,GAAGF,QAAQ,CAAC,CAAD,CADxB;AAAA,MAEIG,IAAI,GAAGH,QAAQ,CAAC,CAAD,CAFnB;AAAA,MAGII,KAAK,GAAGJ,QAAQ,CAAC,CAAD,CAHpB;AAAA,MAIIK,QAAQ,GAAGL,QAAQ,CAAC,CAAD,CAJvB;;AAMA,MAAI,EAAE,CAAC,CAACD,eAAD,IAAoBR,YAAY,CAACU,MAAD,EAASb,iBAAT,CAAZ,IAA2Ca,MAAM,CAACN,KAAP,CAAa,WAAb,CAAhE,KAA8FJ,YAAY,CAACY,IAAD,EAAOjB,eAAP,CAA1G,IAAqIK,YAAY,CAACa,KAAD,EAAQjB,gBAAR,EAA0B,IAA1B,CAAjJ,IAAoLI,YAAY,CAACc,QAAD,EAAWpB,mBAAX,EAAgC,IAAhC,CAAlM,CAAJ,EAA8O;AAC5O,WAAO,KAAP;AACD;;AAED,SAAOa,cAAc,IAAIP,YAAY,CAACW,SAAD,EAAYZ,2BAAZ,CAA9B,IAA0E,CAACQ,cAAD,IAAmBP,YAAY,CAACW,SAAD,EAAYlB,oBAAZ,CAAhH;AACD","sourcesContent":["import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.match\";\n// Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\nimport validateUrlAuthority from './regexp/validateUrlAuthority';\nimport validateUrlFragment from './regexp/validateUrlFragment';\nimport validateUrlPath from './regexp/validateUrlPath';\nimport validateUrlQuery from './regexp/validateUrlQuery';\nimport validateUrlScheme from './regexp/validateUrlScheme';\nimport validateUrlUnencoded from './regexp/validateUrlUnencoded';\nimport validateUrlUnicodeAuthority from './regexp/validateUrlUnicodeAuthority';\n\nfunction isValidMatch(string, regex, optional) {\n  if (!optional) {\n    // RegExp[\"$&\"] is the text of the last match\n    // blank strings are ok, but are falsy, so we check stringiness instead of truthiness\n    return typeof string === 'string' && string.match(regex) && RegExp['$&'] === string;\n  } // RegExp[\"$&\"] is the text of the last match\n\n\n  return !string || string.match(regex) && RegExp['$&'] === string;\n}\n\nexport default function (url, unicodeDomains, requireProtocol) {\n  if (unicodeDomains == null) {\n    unicodeDomains = true;\n  }\n\n  if (requireProtocol == null) {\n    requireProtocol = true;\n  }\n\n  if (!url) {\n    return false;\n  }\n\n  var urlParts = url.match(validateUrlUnencoded);\n\n  if (!urlParts || urlParts[0] !== url) {\n    return false;\n  }\n\n  var scheme = urlParts[1],\n      authority = urlParts[2],\n      path = urlParts[3],\n      query = urlParts[4],\n      fragment = urlParts[5];\n\n  if (!((!requireProtocol || isValidMatch(scheme, validateUrlScheme) && scheme.match(/^https?$/i)) && isValidMatch(path, validateUrlPath) && isValidMatch(query, validateUrlQuery, true) && isValidMatch(fragment, validateUrlFragment, true))) {\n    return false;\n  }\n\n  return unicodeDomains && isValidMatch(authority, validateUrlUnicodeAuthority) || !unicodeDomains && isValidMatch(authority, validateUrlAuthority);\n}"]},"metadata":{},"sourceType":"module"}