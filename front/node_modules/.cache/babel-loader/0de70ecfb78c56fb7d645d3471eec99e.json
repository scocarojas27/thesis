{"ast":null,"code":"import \"core-js/modules/es6.regexp.match\"; // Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n\nimport clone from './lib/clone';\nimport htmlEscape from './htmlEscape';\nimport linkToText from './linkToText';\nimport linkTextWithEntity from './linkTextWithEntity';\nimport urlHasProtocol from './regexp/urlHasProtocol';\nexport default function (entity, text, options) {\n  var url = entity.url;\n  var displayUrl = url;\n  var linkText = htmlEscape(displayUrl); // If the caller passed a urlEntities object (provided by a Twitter API\n  // response with include_entities=true), we use that to render the display_url\n  // for each URL instead of it's underlying t.co URL.\n\n  var urlEntity = options.urlEntities && options.urlEntities[url] || entity;\n\n  if (urlEntity.display_url) {\n    linkText = linkTextWithEntity(urlEntity, options);\n  }\n\n  var attrs = clone(options.htmlAttrs || {});\n\n  if (!url.match(urlHasProtocol)) {\n    url = \"http://\".concat(url);\n  }\n\n  attrs.href = url;\n\n  if (options.targetBlank) {\n    attrs.target = '_blank';\n  } // set class only if urlClass is specified.\n\n\n  if (options.urlClass) {\n    attrs['class'] = options.urlClass;\n  } // set target only if urlTarget is specified.\n\n\n  if (options.urlTarget) {\n    attrs.target = options.urlTarget;\n  }\n\n  if (!options.title && urlEntity.display_url) {\n    attrs.title = urlEntity.expanded_url;\n  }\n\n  return linkToText(entity, linkText, attrs, options);\n}","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/front/node_modules/twitter-text/dist/esm/linkToUrl.js"],"names":["clone","htmlEscape","linkToText","linkTextWithEntity","urlHasProtocol","entity","text","options","url","displayUrl","linkText","urlEntity","urlEntities","display_url","attrs","htmlAttrs","match","concat","href","targetBlank","target","urlClass","urlTarget","title","expanded_url"],"mappings":"AAAA,OAAO,kCAAP,C,CACA;AACA;AACA;;AACA,OAAOA,KAAP,MAAkB,aAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,eAAe,UAAUC,MAAV,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiC;AAC9C,MAAIC,GAAG,GAAGH,MAAM,CAACG,GAAjB;AACA,MAAIC,UAAU,GAAGD,GAAjB;AACA,MAAIE,QAAQ,GAAGT,UAAU,CAACQ,UAAD,CAAzB,CAH8C,CAGP;AACvC;AACA;;AAEA,MAAIE,SAAS,GAAGJ,OAAO,CAACK,WAAR,IAAuBL,OAAO,CAACK,WAAR,CAAoBJ,GAApB,CAAvB,IAAmDH,MAAnE;;AAEA,MAAIM,SAAS,CAACE,WAAd,EAA2B;AACzBH,IAAAA,QAAQ,GAAGP,kBAAkB,CAACQ,SAAD,EAAYJ,OAAZ,CAA7B;AACD;;AAED,MAAIO,KAAK,GAAGd,KAAK,CAACO,OAAO,CAACQ,SAAR,IAAqB,EAAtB,CAAjB;;AAEA,MAAI,CAACP,GAAG,CAACQ,KAAJ,CAAUZ,cAAV,CAAL,EAAgC;AAC9BI,IAAAA,GAAG,GAAG,UAAUS,MAAV,CAAiBT,GAAjB,CAAN;AACD;;AAEDM,EAAAA,KAAK,CAACI,IAAN,GAAaV,GAAb;;AAEA,MAAID,OAAO,CAACY,WAAZ,EAAyB;AACvBL,IAAAA,KAAK,CAACM,MAAN,GAAe,QAAf;AACD,GAvB6C,CAuB5C;;;AAGF,MAAIb,OAAO,CAACc,QAAZ,EAAsB;AACpBP,IAAAA,KAAK,CAAC,OAAD,CAAL,GAAiBP,OAAO,CAACc,QAAzB;AACD,GA5B6C,CA4B5C;;;AAGF,MAAId,OAAO,CAACe,SAAZ,EAAuB;AACrBR,IAAAA,KAAK,CAACM,MAAN,GAAeb,OAAO,CAACe,SAAvB;AACD;;AAED,MAAI,CAACf,OAAO,CAACgB,KAAT,IAAkBZ,SAAS,CAACE,WAAhC,EAA6C;AAC3CC,IAAAA,KAAK,CAACS,KAAN,GAAcZ,SAAS,CAACa,YAAxB;AACD;;AAED,SAAOtB,UAAU,CAACG,MAAD,EAASK,QAAT,EAAmBI,KAAnB,EAA0BP,OAA1B,CAAjB;AACD","sourcesContent":["import \"core-js/modules/es6.regexp.match\";\n// Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\nimport clone from './lib/clone';\nimport htmlEscape from './htmlEscape';\nimport linkToText from './linkToText';\nimport linkTextWithEntity from './linkTextWithEntity';\nimport urlHasProtocol from './regexp/urlHasProtocol';\nexport default function (entity, text, options) {\n  var url = entity.url;\n  var displayUrl = url;\n  var linkText = htmlEscape(displayUrl); // If the caller passed a urlEntities object (provided by a Twitter API\n  // response with include_entities=true), we use that to render the display_url\n  // for each URL instead of it's underlying t.co URL.\n\n  var urlEntity = options.urlEntities && options.urlEntities[url] || entity;\n\n  if (urlEntity.display_url) {\n    linkText = linkTextWithEntity(urlEntity, options);\n  }\n\n  var attrs = clone(options.htmlAttrs || {});\n\n  if (!url.match(urlHasProtocol)) {\n    url = \"http://\".concat(url);\n  }\n\n  attrs.href = url;\n\n  if (options.targetBlank) {\n    attrs.target = '_blank';\n  } // set class only if urlClass is specified.\n\n\n  if (options.urlClass) {\n    attrs['class'] = options.urlClass;\n  } // set target only if urlTarget is specified.\n\n\n  if (options.urlTarget) {\n    attrs.target = options.urlTarget;\n  }\n\n  if (!options.title && urlEntity.display_url) {\n    attrs.title = urlEntity.expanded_url;\n  }\n\n  return linkToText(entity, linkText, attrs, options);\n}"]},"metadata":{},"sourceType":"module"}