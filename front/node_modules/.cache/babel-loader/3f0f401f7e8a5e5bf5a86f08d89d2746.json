{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _user = _interopRequireDefault(require(\"./user\"));\n\nvar _errors = _interopRequireDefault(require(\"./errors\"));\n\nvar _utils = _interopRequireDefault(require(\"./utils\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Manage api calls for specific feeds\n * The feed object contains convenience functions such add activity, remove activity etc\n * @class StreamFeed\n */\n\n\nvar StreamFeed = /*#__PURE__*/function () {\n  function StreamFeed(client, feedSlug, userId, token) {\n    (0, _classCallCheck2.default)(this, StreamFeed);\n    /**\n     * Initialize a feed object\n     * @method constructor\n     * @memberof StreamFeed.prototype\n     * @param {StreamClient} client - The stream client this feed is constructed from\n     * @param {string} feedSlug - The feed slug\n     * @param {string} userId - The user id\n     * @param {string} [token] - The authentication token\n     */\n\n    if (!feedSlug || !userId) {\n      throw new _errors.default.FeedError('Please provide a feed slug and user id, ie client.feed(\"user\", \"1\")');\n    }\n\n    if (feedSlug.indexOf(':') !== -1) {\n      throw new _errors.default.FeedError('Please initialize the feed using client.feed(\"user\", \"1\") not client.feed(\"user:1\")');\n    }\n\n    _utils.default.validateFeedSlug(feedSlug);\n\n    _utils.default.validateUserId(userId); // raise an error if there is no token\n\n\n    if (!token) {\n      throw new _errors.default.FeedError('Missing token, in client side mode please provide a feed secret');\n    }\n\n    this.client = client;\n    this.slug = feedSlug;\n    this.userId = userId;\n    this.id = \"\".concat(this.slug, \":\").concat(this.userId);\n    this.token = token;\n    this.feedUrl = this.id.replace(':', '/');\n    this.feedTogether = this.id.replace(':', '');\n    this.signature = \"\".concat(this.feedTogether, \" \").concat(this.token); // faye setup\n\n    this.notificationChannel = \"site-\".concat(this.client.appId, \"-feed-\").concat(this.feedTogether);\n    this.enrichByDefault = false;\n  }\n\n  (0, _createClass2.default)(StreamFeed, [{\n    key: \"addActivity\",\n    value: function addActivity(activity) {\n      /**\n       * Adds the given activity to the feed\n       * @method addActivity\n       * @memberof StreamFeed.prototype\n       * @param {object} activity - The activity to add\n       * @return {Promise} Promise object\n       */\n      activity = _utils.default.replaceStreamObjects(activity);\n\n      if (!activity.actor && this.client.currentUser) {\n        activity.actor = this.client.currentUser.ref();\n      }\n\n      return this.client.post({\n        url: \"feed/\".concat(this.feedUrl, \"/\"),\n        body: activity,\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"removeActivity\",\n    value: function removeActivity(activityId) {\n      /**\n       * Removes the activity by activityId\n       * @method removeActivity\n       * @memberof StreamFeed.prototype\n       * @param  {string}   activityId Identifier of activity to remove\n       * @return {Promise} Promise object\n       * @example\n       * feed.removeActivity(activityId);\n       * @example\n       * feed.removeActivity({'foreignId': foreignId});\n       */\n      return this.client.delete({\n        url: \"feed/\".concat(this.feedUrl, \"/\").concat(activityId.foreignId || activityId, \"/\"),\n        qs: activityId.foreignId ? {\n          foreign_id: '1'\n        } : {},\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"addActivities\",\n    value: function addActivities(activities) {\n      /**\n       * Adds the given activities to the feed\n       * @method addActivities\n       * @memberof StreamFeed.prototype\n       * @param  {Array}   activities Array of activities to add\n       * @return {Promise}               XHR request object\n       */\n      return this.client.post({\n        url: \"feed/\".concat(this.feedUrl, \"/\"),\n        body: {\n          activities: _utils.default.replaceStreamObjects(activities)\n        },\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"follow\",\n    value: function follow(targetSlug, targetUserId) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      /**\n       * Follows the given target feed\n       * @method follow\n       * @memberof StreamFeed.prototype\n       * @param  {string}   targetSlug   Slug of the target feed\n       * @param  {string}   targetUserId User identifier of the target feed\n       * @param  {object}   options      Additional options\n       * @param  {number}   options.activityCopyLimit Limit the amount of activities copied over on follow\n       * @return {Promise}  Promise object\n       * @example feed.follow('user', '1');\n       * @example feed.follow('user', '1');\n       * @example feed.follow('user', '1', options);\n       */\n\n      if (targetUserId instanceof _user.default) {\n        targetUserId = targetUserId.id;\n      }\n\n      _utils.default.validateFeedSlug(targetSlug);\n\n      _utils.default.validateUserId(targetUserId);\n\n      var body = {\n        target: \"\".concat(targetSlug, \":\").concat(targetUserId)\n      };\n      if (typeof options.limit === 'number') body.activity_copy_limit = options.limit;\n      return this.client.post({\n        url: \"feed/\".concat(this.feedUrl, \"/following/\"),\n        body: body,\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"unfollow\",\n    value: function unfollow(targetSlug, targetUserId) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      /**\n       * Unfollow the given feed\n       * @method unfollow\n       * @memberof StreamFeed.prototype\n       * @param  {string}   targetSlug   Slug of the target feed\n       * @param  {string}   targetUserId [description]\n       * @param  {object} options\n       * @param  {boolean}  options.keepHistory when provided the activities from target\n       *                                                 feed will not be kept in the feed\n       * @return {object}                XHR request object\n       * @example feed.unfollow('user', '2');\n       */\n\n      var qs = {};\n      if (typeof options.keepHistory === 'boolean' && options.keepHistory) qs.keep_history = '1';\n\n      _utils.default.validateFeedSlug(targetSlug);\n\n      _utils.default.validateUserId(targetUserId);\n\n      var targetFeedId = \"\".concat(targetSlug, \":\").concat(targetUserId);\n      return this.client.delete({\n        url: \"feed/\".concat(this.feedUrl, \"/following/\").concat(targetFeedId, \"/\"),\n        qs: qs,\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"following\",\n    value: function following() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      /**\n       * List which feeds this feed is following\n       * @method following\n       * @memberof StreamFeed.prototype\n       * @param  {object}   options  Additional options\n       * @param  {string}   options.filter Filter to apply on search operation\n       * @return {Promise} Promise object\n       * @example feed.following({limit:10, filter: ['user:1', 'user:2']});\n       */\n\n      if (options.filter) {\n        options.filter = options.filter.join(',');\n      }\n\n      return this.client.get({\n        url: \"feed/\".concat(this.feedUrl, \"/following/\"),\n        qs: options,\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"followers\",\n    value: function followers() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      /**\n       * List the followers of this feed\n       * @method followers\n       * @memberof StreamFeed.prototype\n       * @param  {object}   options  Additional options\n       * @param  {string}   options.filter Filter to apply on search operation\n       * @return {Promise} Promise object\n       * @example\n       * feed.followers({limit:10, filter: ['user:1', 'user:2']});\n       */\n\n      if (options.filter) {\n        options.filter = options.filter.join(',');\n      }\n\n      return this.client.get({\n        url: \"feed/\".concat(this.feedUrl, \"/followers/\"),\n        qs: options,\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      /**\n       * Reads the feed\n       * @method get\n       * @memberof StreamFeed.prototype\n       * @param  {object}   options  Additional options\n       * @return {Promise} Promise object\n       * @example feed.get({limit: 10, id_lte: 'activity-id'})\n       * @example feed.get({limit: 10, mark_seen: true})\n       */\n\n      if (options.mark_read && options.mark_read.join) {\n        options.mark_read = options.mark_read.join(',');\n      }\n\n      if (options.mark_seen && options.mark_seen.join) {\n        options.mark_seen = options.mark_seen.join(',');\n      }\n\n      this.client.replaceReactionOptions(options);\n      var path = this.client.shouldUseEnrichEndpoint(options) ? 'enrich/feed/' : 'feed/';\n      return this.client.get({\n        url: \"\".concat(path).concat(this.feedUrl, \"/\"),\n        qs: options,\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"getActivityDetail\",\n    value: function getActivityDetail(activityId, options) {\n      /**\n       * Retrieves one activity from a feed and adds enrichment\n       * @method getActivityDetail\n       * @memberof StreamFeed.prototype\n       * @param  {string}   activityId Identifier of activity to retrieve\n       * @param  {object}   options  Additional options\n       * @return {Promise} Promise object\n       * @example feed.getActivityDetail(activityId)\n       * @example feed.getActivityDetail(activityId, {withRecentReactions: true})\n       * @example feed.getActivityDetail(activityId, {withReactionCounts: true})\n       * @example feed.getActivityDetail(activityId, {withOwnReactions: true, withReactionCounts: true})\n       */\n      return this.get(_objectSpread({\n        id_lte: activityId,\n        id_gte: activityId,\n        limit: 1\n      }, options || {}));\n    }\n  }, {\n    key: \"getFayeClient\",\n    value: function getFayeClient() {\n      /**\n       * Returns the current faye client object\n       * @method getFayeClient\n       * @memberof StreamFeed.prototype\n       * @access private\n       * @return {object} Faye client\n       */\n      return this.client.getFayeClient();\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(callback) {\n      /**\n       * Subscribes to any changes in the feed, return a promise\n       * @method subscribe\n       * @memberof StreamFeed.prototype\n       * @param  {function} callback Callback to call on completion\n       * @return {Promise}           Promise object\n       * @example\n       * feed.subscribe(callback).then(function(){\n       * \t\tconsole.log('we are now listening to changes');\n       * });\n       */\n      if (!this.client.appId) {\n        throw new _errors.default.SiteError('Missing app id, which is needed to subscribe, use var client = stream.connect(key, secret, appId);');\n      }\n\n      var subscription = this.getFayeClient().subscribe(\"/\".concat(this.notificationChannel), callback);\n      this.client.subscriptions[\"/\".concat(this.notificationChannel)] = {\n        token: this.token,\n        userId: this.notificationChannel,\n        fayeSubscription: subscription\n      };\n      return subscription;\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      /**\n       * Cancel updates created via feed.subscribe()\n       * @return void\n       */\n      var streamSubscription = this.client.subscriptions[\"/\".concat(this.notificationChannel)];\n\n      if (streamSubscription) {\n        delete this.client.subscriptions[\"/\".concat(this.notificationChannel)];\n        streamSubscription.fayeSubscription.cancel();\n      }\n    }\n  }, {\n    key: \"updateActivityToTargets\",\n    value: function updateActivityToTargets(foreignId, time, newTargets, addedTargets, removedTargets) {\n      /**\n       * Updates an activity's \"to\" fields\n       * @since 3.10.0\n       * @param {string} foreignId The foreign_id of the activity to update\n       * @param {string} time The time of the activity to update\n       * @param {array} newTargets Set the new \"to\" targets for the activity - will remove old targets\n       * @param {array} added_targets Add these new targets to the activity\n       * @param {array} removedTargets Remove these targets from the activity\n       */\n      if (!foreignId) {\n        throw new Error('Missing `foreign_id` parameter!');\n      } else if (!time) {\n        throw new Error('Missing `time` parameter!');\n      }\n\n      if (!newTargets && !addedTargets && !removedTargets) {\n        throw new Error('Requires you to provide at least one parameter for `newTargets`, `addedTargets`, or `removedTargets` - example: `updateActivityToTargets(\"foreignID:1234\", new Date(), [newTargets...], [addedTargets...], [removedTargets...])`');\n      }\n\n      if (newTargets) {\n        if (addedTargets || removedTargets) {\n          throw new Error(\"Can't include add_targets or removedTargets if you're also including newTargets\");\n        }\n      }\n\n      if (addedTargets && removedTargets) {\n        // brute force - iterate through added, check to see if removed contains that element\n        addedTargets.forEach(function (addedTarget) {\n          if (removedTargets.includes(addedTarget)) {\n            throw new Error(\"Can't have the same feed ID in addedTargets and removedTargets.\");\n          }\n        });\n      }\n\n      var body = {\n        foreign_id: foreignId,\n        time: time\n      };\n      if (newTargets) body.new_targets = newTargets;\n      if (addedTargets) body.added_targets = addedTargets;\n      if (removedTargets) body.removed_targets = removedTargets;\n      return this.client.post({\n        url: \"feed_targets/\".concat(this.feedUrl, \"/activity_to_targets/\"),\n        signature: this.signature,\n        body: body\n      });\n    }\n  }]);\n  return StreamFeed;\n}();\n\nexports.default = StreamFeed;","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/front/node_modules/getstream/lib/lib/feed.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_defineProperty2","_classCallCheck2","_createClass2","_user","_errors","_utils","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","StreamFeed","client","feedSlug","userId","token","FeedError","indexOf","validateFeedSlug","validateUserId","slug","id","concat","feedUrl","replace","feedTogether","signature","notificationChannel","appId","enrichByDefault","addActivity","activity","replaceStreamObjects","actor","currentUser","ref","post","url","body","removeActivity","activityId","delete","foreignId","qs","foreign_id","addActivities","activities","follow","targetSlug","targetUserId","options","undefined","limit","activity_copy_limit","unfollow","keepHistory","keep_history","targetFeedId","following","join","get","followers","mark_read","mark_seen","replaceReactionOptions","path","shouldUseEnrichEndpoint","getActivityDetail","id_lte","id_gte","getFayeClient","subscribe","callback","SiteError","subscription","subscriptions","fayeSubscription","unsubscribe","streamSubscription","cancel","updateActivityToTargets","time","newTargets","addedTargets","removedTargets","Error","addedTarget","includes","new_targets","added_targets","removed_targets"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _user = _interopRequireDefault(require(\"./user\"));\n\nvar _errors = _interopRequireDefault(require(\"./errors\"));\n\nvar _utils = _interopRequireDefault(require(\"./utils\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Manage api calls for specific feeds\n * The feed object contains convenience functions such add activity, remove activity etc\n * @class StreamFeed\n */\nvar StreamFeed = /*#__PURE__*/function () {\n  function StreamFeed(client, feedSlug, userId, token) {\n    (0, _classCallCheck2.default)(this, StreamFeed);\n\n    /**\n     * Initialize a feed object\n     * @method constructor\n     * @memberof StreamFeed.prototype\n     * @param {StreamClient} client - The stream client this feed is constructed from\n     * @param {string} feedSlug - The feed slug\n     * @param {string} userId - The user id\n     * @param {string} [token] - The authentication token\n     */\n    if (!feedSlug || !userId) {\n      throw new _errors.default.FeedError('Please provide a feed slug and user id, ie client.feed(\"user\", \"1\")');\n    }\n\n    if (feedSlug.indexOf(':') !== -1) {\n      throw new _errors.default.FeedError('Please initialize the feed using client.feed(\"user\", \"1\") not client.feed(\"user:1\")');\n    }\n\n    _utils.default.validateFeedSlug(feedSlug);\n\n    _utils.default.validateUserId(userId); // raise an error if there is no token\n\n\n    if (!token) {\n      throw new _errors.default.FeedError('Missing token, in client side mode please provide a feed secret');\n    }\n\n    this.client = client;\n    this.slug = feedSlug;\n    this.userId = userId;\n    this.id = \"\".concat(this.slug, \":\").concat(this.userId);\n    this.token = token;\n    this.feedUrl = this.id.replace(':', '/');\n    this.feedTogether = this.id.replace(':', '');\n    this.signature = \"\".concat(this.feedTogether, \" \").concat(this.token); // faye setup\n\n    this.notificationChannel = \"site-\".concat(this.client.appId, \"-feed-\").concat(this.feedTogether);\n    this.enrichByDefault = false;\n  }\n\n  (0, _createClass2.default)(StreamFeed, [{\n    key: \"addActivity\",\n    value: function addActivity(activity) {\n      /**\n       * Adds the given activity to the feed\n       * @method addActivity\n       * @memberof StreamFeed.prototype\n       * @param {object} activity - The activity to add\n       * @return {Promise} Promise object\n       */\n      activity = _utils.default.replaceStreamObjects(activity);\n\n      if (!activity.actor && this.client.currentUser) {\n        activity.actor = this.client.currentUser.ref();\n      }\n\n      return this.client.post({\n        url: \"feed/\".concat(this.feedUrl, \"/\"),\n        body: activity,\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"removeActivity\",\n    value: function removeActivity(activityId) {\n      /**\n       * Removes the activity by activityId\n       * @method removeActivity\n       * @memberof StreamFeed.prototype\n       * @param  {string}   activityId Identifier of activity to remove\n       * @return {Promise} Promise object\n       * @example\n       * feed.removeActivity(activityId);\n       * @example\n       * feed.removeActivity({'foreignId': foreignId});\n       */\n      return this.client.delete({\n        url: \"feed/\".concat(this.feedUrl, \"/\").concat(activityId.foreignId || activityId, \"/\"),\n        qs: activityId.foreignId ? {\n          foreign_id: '1'\n        } : {},\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"addActivities\",\n    value: function addActivities(activities) {\n      /**\n       * Adds the given activities to the feed\n       * @method addActivities\n       * @memberof StreamFeed.prototype\n       * @param  {Array}   activities Array of activities to add\n       * @return {Promise}               XHR request object\n       */\n      return this.client.post({\n        url: \"feed/\".concat(this.feedUrl, \"/\"),\n        body: {\n          activities: _utils.default.replaceStreamObjects(activities)\n        },\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"follow\",\n    value: function follow(targetSlug, targetUserId) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      /**\n       * Follows the given target feed\n       * @method follow\n       * @memberof StreamFeed.prototype\n       * @param  {string}   targetSlug   Slug of the target feed\n       * @param  {string}   targetUserId User identifier of the target feed\n       * @param  {object}   options      Additional options\n       * @param  {number}   options.activityCopyLimit Limit the amount of activities copied over on follow\n       * @return {Promise}  Promise object\n       * @example feed.follow('user', '1');\n       * @example feed.follow('user', '1');\n       * @example feed.follow('user', '1', options);\n       */\n      if (targetUserId instanceof _user.default) {\n        targetUserId = targetUserId.id;\n      }\n\n      _utils.default.validateFeedSlug(targetSlug);\n\n      _utils.default.validateUserId(targetUserId);\n\n      var body = {\n        target: \"\".concat(targetSlug, \":\").concat(targetUserId)\n      };\n      if (typeof options.limit === 'number') body.activity_copy_limit = options.limit;\n      return this.client.post({\n        url: \"feed/\".concat(this.feedUrl, \"/following/\"),\n        body: body,\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"unfollow\",\n    value: function unfollow(targetSlug, targetUserId) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      /**\n       * Unfollow the given feed\n       * @method unfollow\n       * @memberof StreamFeed.prototype\n       * @param  {string}   targetSlug   Slug of the target feed\n       * @param  {string}   targetUserId [description]\n       * @param  {object} options\n       * @param  {boolean}  options.keepHistory when provided the activities from target\n       *                                                 feed will not be kept in the feed\n       * @return {object}                XHR request object\n       * @example feed.unfollow('user', '2');\n       */\n      var qs = {};\n      if (typeof options.keepHistory === 'boolean' && options.keepHistory) qs.keep_history = '1';\n\n      _utils.default.validateFeedSlug(targetSlug);\n\n      _utils.default.validateUserId(targetUserId);\n\n      var targetFeedId = \"\".concat(targetSlug, \":\").concat(targetUserId);\n      return this.client.delete({\n        url: \"feed/\".concat(this.feedUrl, \"/following/\").concat(targetFeedId, \"/\"),\n        qs: qs,\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"following\",\n    value: function following() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * List which feeds this feed is following\n       * @method following\n       * @memberof StreamFeed.prototype\n       * @param  {object}   options  Additional options\n       * @param  {string}   options.filter Filter to apply on search operation\n       * @return {Promise} Promise object\n       * @example feed.following({limit:10, filter: ['user:1', 'user:2']});\n       */\n      if (options.filter) {\n        options.filter = options.filter.join(',');\n      }\n\n      return this.client.get({\n        url: \"feed/\".concat(this.feedUrl, \"/following/\"),\n        qs: options,\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"followers\",\n    value: function followers() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * List the followers of this feed\n       * @method followers\n       * @memberof StreamFeed.prototype\n       * @param  {object}   options  Additional options\n       * @param  {string}   options.filter Filter to apply on search operation\n       * @return {Promise} Promise object\n       * @example\n       * feed.followers({limit:10, filter: ['user:1', 'user:2']});\n       */\n      if (options.filter) {\n        options.filter = options.filter.join(',');\n      }\n\n      return this.client.get({\n        url: \"feed/\".concat(this.feedUrl, \"/followers/\"),\n        qs: options,\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * Reads the feed\n       * @method get\n       * @memberof StreamFeed.prototype\n       * @param  {object}   options  Additional options\n       * @return {Promise} Promise object\n       * @example feed.get({limit: 10, id_lte: 'activity-id'})\n       * @example feed.get({limit: 10, mark_seen: true})\n       */\n      if (options.mark_read && options.mark_read.join) {\n        options.mark_read = options.mark_read.join(',');\n      }\n\n      if (options.mark_seen && options.mark_seen.join) {\n        options.mark_seen = options.mark_seen.join(',');\n      }\n\n      this.client.replaceReactionOptions(options);\n      var path = this.client.shouldUseEnrichEndpoint(options) ? 'enrich/feed/' : 'feed/';\n      return this.client.get({\n        url: \"\".concat(path).concat(this.feedUrl, \"/\"),\n        qs: options,\n        signature: this.signature\n      });\n    }\n  }, {\n    key: \"getActivityDetail\",\n    value: function getActivityDetail(activityId, options) {\n      /**\n       * Retrieves one activity from a feed and adds enrichment\n       * @method getActivityDetail\n       * @memberof StreamFeed.prototype\n       * @param  {string}   activityId Identifier of activity to retrieve\n       * @param  {object}   options  Additional options\n       * @return {Promise} Promise object\n       * @example feed.getActivityDetail(activityId)\n       * @example feed.getActivityDetail(activityId, {withRecentReactions: true})\n       * @example feed.getActivityDetail(activityId, {withReactionCounts: true})\n       * @example feed.getActivityDetail(activityId, {withOwnReactions: true, withReactionCounts: true})\n       */\n      return this.get(_objectSpread({\n        id_lte: activityId,\n        id_gte: activityId,\n        limit: 1\n      }, options || {}));\n    }\n  }, {\n    key: \"getFayeClient\",\n    value: function getFayeClient() {\n      /**\n       * Returns the current faye client object\n       * @method getFayeClient\n       * @memberof StreamFeed.prototype\n       * @access private\n       * @return {object} Faye client\n       */\n      return this.client.getFayeClient();\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(callback) {\n      /**\n       * Subscribes to any changes in the feed, return a promise\n       * @method subscribe\n       * @memberof StreamFeed.prototype\n       * @param  {function} callback Callback to call on completion\n       * @return {Promise}           Promise object\n       * @example\n       * feed.subscribe(callback).then(function(){\n       * \t\tconsole.log('we are now listening to changes');\n       * });\n       */\n      if (!this.client.appId) {\n        throw new _errors.default.SiteError('Missing app id, which is needed to subscribe, use var client = stream.connect(key, secret, appId);');\n      }\n\n      var subscription = this.getFayeClient().subscribe(\"/\".concat(this.notificationChannel), callback);\n      this.client.subscriptions[\"/\".concat(this.notificationChannel)] = {\n        token: this.token,\n        userId: this.notificationChannel,\n        fayeSubscription: subscription\n      };\n      return subscription;\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      /**\n       * Cancel updates created via feed.subscribe()\n       * @return void\n       */\n      var streamSubscription = this.client.subscriptions[\"/\".concat(this.notificationChannel)];\n\n      if (streamSubscription) {\n        delete this.client.subscriptions[\"/\".concat(this.notificationChannel)];\n        streamSubscription.fayeSubscription.cancel();\n      }\n    }\n  }, {\n    key: \"updateActivityToTargets\",\n    value: function updateActivityToTargets(foreignId, time, newTargets, addedTargets, removedTargets) {\n      /**\n       * Updates an activity's \"to\" fields\n       * @since 3.10.0\n       * @param {string} foreignId The foreign_id of the activity to update\n       * @param {string} time The time of the activity to update\n       * @param {array} newTargets Set the new \"to\" targets for the activity - will remove old targets\n       * @param {array} added_targets Add these new targets to the activity\n       * @param {array} removedTargets Remove these targets from the activity\n       */\n      if (!foreignId) {\n        throw new Error('Missing `foreign_id` parameter!');\n      } else if (!time) {\n        throw new Error('Missing `time` parameter!');\n      }\n\n      if (!newTargets && !addedTargets && !removedTargets) {\n        throw new Error('Requires you to provide at least one parameter for `newTargets`, `addedTargets`, or `removedTargets` - example: `updateActivityToTargets(\"foreignID:1234\", new Date(), [newTargets...], [addedTargets...], [removedTargets...])`');\n      }\n\n      if (newTargets) {\n        if (addedTargets || removedTargets) {\n          throw new Error(\"Can't include add_targets or removedTargets if you're also including newTargets\");\n        }\n      }\n\n      if (addedTargets && removedTargets) {\n        // brute force - iterate through added, check to see if removed contains that element\n        addedTargets.forEach(function (addedTarget) {\n          if (removedTargets.includes(addedTarget)) {\n            throw new Error(\"Can't have the same feed ID in addedTargets and removedTargets.\");\n          }\n        });\n      }\n\n      var body = {\n        foreign_id: foreignId,\n        time: time\n      };\n      if (newTargets) body.new_targets = newTargets;\n      if (addedTargets) body.added_targets = addedTargets;\n      if (removedTargets) body.removed_targets = removedTargets;\n      return this.client.post({\n        url: \"feed_targets/\".concat(this.feedUrl, \"/activity_to_targets/\"),\n        signature: this.signature,\n        body: body\n      });\n    }\n  }]);\n  return StreamFeed;\n}();\n\nexports.default = StreamFeed;"]},"metadata":{},"sourceType":"script"}