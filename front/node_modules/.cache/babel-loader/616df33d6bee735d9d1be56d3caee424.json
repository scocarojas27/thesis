{"ast":null,"code":"import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.match\"; // Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n\nimport punycode from 'punycode';\nimport validAsciiDomain from '../regexp/validAsciiDomain';\nvar MAX_DOMAIN_LABEL_LENGTH = 63;\nvar PUNYCODE_ENCODED_DOMAIN_PREFIX = 'xn--'; // This is an extremely lightweight implementation of domain name validation according to RFC 3490\n// Our regexes handle most of the cases well enough\n// See https://tools.ietf.org/html/rfc3490#section-4.1 for details\n\nvar idna = {\n  toAscii: function toAscii(domain) {\n    if (domain.substring(0, 4) === PUNYCODE_ENCODED_DOMAIN_PREFIX && !domain.match(validAsciiDomain)) {\n      // Punycode encoded url cannot contain non ASCII characters\n      return;\n    }\n\n    var labels = domain.split('.');\n\n    for (var i = 0; i < labels.length; i++) {\n      var label = labels[i];\n      var punycodeEncodedLabel = punycode.toASCII(label);\n\n      if (punycodeEncodedLabel.length < 1 || punycodeEncodedLabel.length > MAX_DOMAIN_LABEL_LENGTH) {\n        // DNS label has invalid length\n        return;\n      }\n    }\n\n    return labels.join('.');\n  }\n};\nexport default idna;","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/front/node_modules/twitter-text/dist/esm/lib/idna.js"],"names":["punycode","validAsciiDomain","MAX_DOMAIN_LABEL_LENGTH","PUNYCODE_ENCODED_DOMAIN_PREFIX","idna","toAscii","domain","substring","match","labels","split","i","length","label","punycodeEncodedLabel","toASCII","join"],"mappings":"AAAA,OAAO,kCAAP;AACA,OAAO,kCAAP,C,CACA;AACA;AACA;;AACA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,IAAIC,uBAAuB,GAAG,EAA9B;AACA,IAAIC,8BAA8B,GAAG,MAArC,C,CAA6C;AAC7C;AACA;;AAEA,IAAIC,IAAI,GAAG;AACTC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,MAAjB,EAAyB;AAChC,QAAIA,MAAM,CAACC,SAAP,CAAiB,CAAjB,EAAoB,CAApB,MAA2BJ,8BAA3B,IAA6D,CAACG,MAAM,CAACE,KAAP,CAAaP,gBAAb,CAAlE,EAAkG;AAChG;AACA;AACD;;AAED,QAAIQ,MAAM,GAAGH,MAAM,CAACI,KAAP,CAAa,GAAb,CAAb;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAIE,KAAK,GAAGJ,MAAM,CAACE,CAAD,CAAlB;AACA,UAAIG,oBAAoB,GAAGd,QAAQ,CAACe,OAAT,CAAiBF,KAAjB,CAA3B;;AAEA,UAAIC,oBAAoB,CAACF,MAArB,GAA8B,CAA9B,IAAmCE,oBAAoB,CAACF,MAArB,GAA8BV,uBAArE,EAA8F;AAC5F;AACA;AACD;AACF;;AAED,WAAOO,MAAM,CAACO,IAAP,CAAY,GAAZ,CAAP;AACD;AApBQ,CAAX;AAsBA,eAAeZ,IAAf","sourcesContent":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.match\";\n// Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\nimport punycode from 'punycode';\nimport validAsciiDomain from '../regexp/validAsciiDomain';\nvar MAX_DOMAIN_LABEL_LENGTH = 63;\nvar PUNYCODE_ENCODED_DOMAIN_PREFIX = 'xn--'; // This is an extremely lightweight implementation of domain name validation according to RFC 3490\n// Our regexes handle most of the cases well enough\n// See https://tools.ietf.org/html/rfc3490#section-4.1 for details\n\nvar idna = {\n  toAscii: function toAscii(domain) {\n    if (domain.substring(0, 4) === PUNYCODE_ENCODED_DOMAIN_PREFIX && !domain.match(validAsciiDomain)) {\n      // Punycode encoded url cannot contain non ASCII characters\n      return;\n    }\n\n    var labels = domain.split('.');\n\n    for (var i = 0; i < labels.length; i++) {\n      var label = labels[i];\n      var punycodeEncodedLabel = punycode.toASCII(label);\n\n      if (punycodeEncodedLabel.length < 1 || punycodeEncodedLabel.length > MAX_DOMAIN_LABEL_LENGTH) {\n        // DNS label has invalid length\n        return;\n      }\n    }\n\n    return labels.join('.');\n  }\n};\nexport default idna;"]},"metadata":{},"sourceType":"module"}