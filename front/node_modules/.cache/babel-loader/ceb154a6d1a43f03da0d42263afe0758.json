{"ast":null,"code":"'use strict';\n\nvar assign = require('../util/assign'),\n    Logging = require('../mixins/logging');\n\nvar Extensible = {\n  addExtension: function (extension) {\n    this._extensions = this._extensions || [];\n\n    this._extensions.push(extension);\n\n    if (extension.added) extension.added(this);\n  },\n  removeExtension: function (extension) {\n    if (!this._extensions) return;\n    var i = this._extensions.length;\n\n    while (i--) {\n      if (this._extensions[i] !== extension) continue;\n\n      this._extensions.splice(i, 1);\n\n      if (extension.removed) extension.removed(this);\n    }\n  },\n  pipeThroughExtensions: function (stage, message, request, callback, context) {\n    this.debug('Passing through ? extensions: ?', stage, message);\n    if (!this._extensions) return callback.call(context, message);\n\n    var extensions = this._extensions.slice();\n\n    var pipe = function (message) {\n      if (!message) return callback.call(context, message);\n      var extension = extensions.shift();\n      if (!extension) return callback.call(context, message);\n      var fn = extension[stage];\n      if (!fn) return pipe(message);\n      if (fn.length >= 3) extension[stage](message, request, pipe);else extension[stage](message, pipe);\n    };\n\n    pipe(message);\n  }\n};\nassign(Extensible, Logging);\nmodule.exports = Extensible;","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/node_modules/faye/src/protocol/extensible.js"],"names":["assign","require","Logging","Extensible","addExtension","extension","_extensions","push","added","removeExtension","i","length","splice","removed","pipeThroughExtensions","stage","message","request","callback","context","debug","call","extensions","slice","pipe","shift","fn","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAIC,OAAO,CAAC,gBAAD,CAArB;AAAA,IACIC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CADrB;;AAGA,IAAIE,UAAU,GAAG;AACfC,EAAAA,YAAY,EAAE,UAASC,SAAT,EAAoB;AAChC,SAAKC,WAAL,GAAmB,KAAKA,WAAL,IAAoB,EAAvC;;AACA,SAAKA,WAAL,CAAiBC,IAAjB,CAAsBF,SAAtB;;AACA,QAAIA,SAAS,CAACG,KAAd,EAAqBH,SAAS,CAACG,KAAV,CAAgB,IAAhB;AACtB,GALc;AAOfC,EAAAA,eAAe,EAAE,UAASJ,SAAT,EAAoB;AACnC,QAAI,CAAC,KAAKC,WAAV,EAAuB;AACvB,QAAII,CAAC,GAAG,KAAKJ,WAAL,CAAiBK,MAAzB;;AACA,WAAOD,CAAC,EAAR,EAAY;AACV,UAAI,KAAKJ,WAAL,CAAiBI,CAAjB,MAAwBL,SAA5B,EAAuC;;AACvC,WAAKC,WAAL,CAAiBM,MAAjB,CAAwBF,CAAxB,EAA0B,CAA1B;;AACA,UAAIL,SAAS,CAACQ,OAAd,EAAuBR,SAAS,CAACQ,OAAV,CAAkB,IAAlB;AACxB;AACF,GAfc;AAiBfC,EAAAA,qBAAqB,EAAE,UAASC,KAAT,EAAgBC,OAAhB,EAAyBC,OAAzB,EAAkCC,QAAlC,EAA4CC,OAA5C,EAAqD;AAC1E,SAAKC,KAAL,CAAW,iCAAX,EAA8CL,KAA9C,EAAqDC,OAArD;AAEA,QAAI,CAAC,KAAKV,WAAV,EAAuB,OAAOY,QAAQ,CAACG,IAAT,CAAcF,OAAd,EAAuBH,OAAvB,CAAP;;AACvB,QAAIM,UAAU,GAAG,KAAKhB,WAAL,CAAiBiB,KAAjB,EAAjB;;AAEA,QAAIC,IAAI,GAAG,UAASR,OAAT,EAAkB;AAC3B,UAAI,CAACA,OAAL,EAAc,OAAOE,QAAQ,CAACG,IAAT,CAAcF,OAAd,EAAuBH,OAAvB,CAAP;AAEd,UAAIX,SAAS,GAAGiB,UAAU,CAACG,KAAX,EAAhB;AACA,UAAI,CAACpB,SAAL,EAAgB,OAAOa,QAAQ,CAACG,IAAT,CAAcF,OAAd,EAAuBH,OAAvB,CAAP;AAEhB,UAAIU,EAAE,GAAGrB,SAAS,CAACU,KAAD,CAAlB;AACA,UAAI,CAACW,EAAL,EAAS,OAAOF,IAAI,CAACR,OAAD,CAAX;AAET,UAAIU,EAAE,CAACf,MAAH,IAAa,CAAjB,EAAoBN,SAAS,CAACU,KAAD,CAAT,CAAiBC,OAAjB,EAA0BC,OAA1B,EAAmCO,IAAnC,EAApB,KACoBnB,SAAS,CAACU,KAAD,CAAT,CAAiBC,OAAjB,EAA0BQ,IAA1B;AACrB,KAXD;;AAYAA,IAAAA,IAAI,CAACR,OAAD,CAAJ;AACD;AApCc,CAAjB;AAuCAhB,MAAM,CAACG,UAAD,EAAaD,OAAb,CAAN;AAEAyB,MAAM,CAACC,OAAP,GAAiBzB,UAAjB","sourcesContent":["'use strict';\n\nvar assign  = require('../util/assign'),\n    Logging = require('../mixins/logging');\n\nvar Extensible = {\n  addExtension: function(extension) {\n    this._extensions = this._extensions || [];\n    this._extensions.push(extension);\n    if (extension.added) extension.added(this);\n  },\n\n  removeExtension: function(extension) {\n    if (!this._extensions) return;\n    var i = this._extensions.length;\n    while (i--) {\n      if (this._extensions[i] !== extension) continue;\n      this._extensions.splice(i,1);\n      if (extension.removed) extension.removed(this);\n    }\n  },\n\n  pipeThroughExtensions: function(stage, message, request, callback, context) {\n    this.debug('Passing through ? extensions: ?', stage, message);\n\n    if (!this._extensions) return callback.call(context, message);\n    var extensions = this._extensions.slice();\n\n    var pipe = function(message) {\n      if (!message) return callback.call(context, message);\n\n      var extension = extensions.shift();\n      if (!extension) return callback.call(context, message);\n\n      var fn = extension[stage];\n      if (!fn) return pipe(message);\n\n      if (fn.length >= 3) extension[stage](message, request, pipe);\n      else                extension[stage](message, pipe);\n    };\n    pipe(message);\n  }\n};\n\nassign(Extensible, Logging);\n\nmodule.exports = Extensible;\n"]},"metadata":{},"sourceType":"script"}