{"ast":null,"code":"var request = require('request');\n\nvar errors = require('./errors.js');\n\nvar Client = function () {\n  this.initialize.apply(this, arguments);\n};\n\nClient.prototype = {\n  baseUrl: 'https://analytics.stream-io-api.com/analytics/v1.0/',\n  initialize: function (cfg) {\n    var configs = cfg || {};\n\n    if (!configs.apiKey || !configs.token) {\n      throw new errors.MisconfiguredClient('the client must be initialized with apiKey and token');\n    }\n\n    this.apiKey = configs.apiKey;\n    this.token = configs.token;\n  },\n  send: function (resourceName, eventData) {\n    var callback = function (err, response) {\n      if (err) {\n        throw err;\n      }\n\n      if (!/^2\\d\\d$/.test(response.statusCode)) {\n        throw new errors.APIError(response.responseText);\n      }\n    };\n\n    return this.post({\n      'url': this.baseUrl + resourceName + '/',\n      'body': eventData\n    }, callback);\n  },\n  userAgent: function () {\n    var description = this.node ? 'node' : 'browser';\n    var version = 'unknown';\n    return 'stream-javascript-client-' + description + '-' + version;\n  },\n  enrichKwargs: function (kwargs) {\n    if (kwargs.qs === undefined) {\n      kwargs.qs = {};\n    }\n\n    kwargs.qs['api_key'] = this.apiKey;\n    kwargs.json = true;\n    kwargs.headers = {};\n    kwargs.headers['stream-auth-type'] = 'jwt';\n    kwargs.headers.Authorization = this.token;\n    kwargs.headers['X-Stream-Client'] = this.userAgent();\n    kwargs.timeout = 10 * 1000; // 10 seconds\n\n    return kwargs;\n  },\n  post: function (kwargs, callback) {\n    kwargs = this.enrichKwargs(kwargs);\n    kwargs.method = 'POST';\n    return request(kwargs, callback);\n  }\n};\nmodule.exports = Client;","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/front/node_modules/stream-analytics/src/client.js"],"names":["request","require","errors","Client","initialize","apply","arguments","prototype","baseUrl","cfg","configs","apiKey","token","MisconfiguredClient","send","resourceName","eventData","callback","err","response","test","statusCode","APIError","responseText","post","userAgent","description","node","version","enrichKwargs","kwargs","qs","undefined","json","headers","Authorization","timeout","method","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAApB;;AAEA,IAAIE,MAAM,GAAG,YAAY;AACvB,OAAKC,UAAL,CAAgBC,KAAhB,CAAsB,IAAtB,EAA4BC,SAA5B;AACD,CAFD;;AAIAH,MAAM,CAACI,SAAP,GAAmB;AACjBC,EAAAA,OAAO,EAAE,qDADQ;AAGjBJ,EAAAA,UAAU,EAAE,UAAUK,GAAV,EAAe;AACzB,QAAIC,OAAO,GAAGD,GAAG,IAAI,EAArB;;AACA,QAAI,CAACC,OAAO,CAACC,MAAT,IAAmB,CAACD,OAAO,CAACE,KAAhC,EAAuC;AACrC,YAAM,IAAIV,MAAM,CAACW,mBAAX,CAA+B,sDAA/B,CAAN;AACD;;AAED,SAAKF,MAAL,GAAcD,OAAO,CAACC,MAAtB;AACA,SAAKC,KAAL,GAAaF,OAAO,CAACE,KAArB;AACD,GAXgB;AAajBE,EAAAA,IAAI,EAAE,UAAUC,YAAV,EAAwBC,SAAxB,EAAmC;AACvC,QAAIC,QAAQ,GAAG,UAAUC,GAAV,EAAeC,QAAf,EAAyB;AACtC,UAAID,GAAJ,EAAS;AACP,cAAMA,GAAN;AACD;;AAED,UAAI,CAAC,UAAUE,IAAV,CAAeD,QAAQ,CAACE,UAAxB,CAAL,EAA0C;AACxC,cAAM,IAAInB,MAAM,CAACoB,QAAX,CAAoBH,QAAQ,CAACI,YAA7B,CAAN;AACD;AAEF,KATD;;AAWA,WAAO,KAAKC,IAAL,CACL;AACE,aAAO,KAAKhB,OAAL,GAAeO,YAAf,GAA8B,GADvC;AAEE,cAAQC;AAFV,KADK,EAIFC,QAJE,CAAP;AAKD,GA9BgB;AAgCjBQ,EAAAA,SAAS,EAAE,YAAY;AACrB,QAAIC,WAAW,GAAI,KAAKC,IAAN,GAAc,MAAd,GAAuB,SAAzC;AACA,QAAIC,OAAO,GAAG,SAAd;AACA,WAAO,8BAA8BF,WAA9B,GAA4C,GAA5C,GAAkDE,OAAzD;AACD,GApCgB;AAsCjBC,EAAAA,YAAY,EAAE,UAAUC,MAAV,EAAkB;AAC9B,QAAIA,MAAM,CAACC,EAAP,KAAcC,SAAlB,EAA6B;AAC3BF,MAAAA,MAAM,CAACC,EAAP,GAAY,EAAZ;AACD;;AAEDD,IAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,IAAuB,KAAKpB,MAA5B;AACAmB,IAAAA,MAAM,CAACG,IAAP,GAAc,IAAd;AACAH,IAAAA,MAAM,CAACI,OAAP,GAAiB,EAAjB;AACAJ,IAAAA,MAAM,CAACI,OAAP,CAAe,kBAAf,IAAqC,KAArC;AACAJ,IAAAA,MAAM,CAACI,OAAP,CAAeC,aAAf,GAA+B,KAAKvB,KAApC;AACAkB,IAAAA,MAAM,CAACI,OAAP,CAAe,iBAAf,IAAoC,KAAKT,SAAL,EAApC;AACAK,IAAAA,MAAM,CAACM,OAAP,GAAiB,KAAK,IAAtB,CAX8B,CAWF;;AAC5B,WAAON,MAAP;AACD,GAnDgB;AAqDjBN,EAAAA,IAAI,EAAE,UAAUM,MAAV,EAAkBb,QAAlB,EAA4B;AAChCa,IAAAA,MAAM,GAAG,KAAKD,YAAL,CAAkBC,MAAlB,CAAT;AACAA,IAAAA,MAAM,CAACO,MAAP,GAAgB,MAAhB;AACA,WAAOrC,OAAO,CAAC8B,MAAD,EAASb,QAAT,CAAd;AACD;AAzDgB,CAAnB;AA4DAqB,MAAM,CAACC,OAAP,GAAiBpC,MAAjB","sourcesContent":["var request = require('request');\nvar errors = require('./errors.js');\n\nvar Client = function () {\n  this.initialize.apply(this, arguments);\n};\n\nClient.prototype = {\n  baseUrl: 'https://analytics.stream-io-api.com/analytics/v1.0/',\n\n  initialize: function (cfg) {\n    var configs = cfg || {};\n    if (!configs.apiKey || !configs.token) {\n      throw new errors.MisconfiguredClient('the client must be initialized with apiKey and token');\n    }\n\n    this.apiKey = configs.apiKey;\n    this.token = configs.token;\n  },\n\n  send: function (resourceName, eventData) {\n    var callback = function (err, response) {\n      if (err) {\n        throw err;\n      }\n\n      if (!/^2\\d\\d$/.test(response.statusCode)) {\n        throw new errors.APIError(response.responseText);\n      }\n\n    };\n\n    return this.post(\n      {\n        'url': this.baseUrl + resourceName + '/',\n        'body': eventData,\n      }, callback);\n  },\n\n  userAgent: function () {\n    var description = (this.node) ? 'node' : 'browser';\n    var version = 'unknown';\n    return 'stream-javascript-client-' + description + '-' + version;\n  },\n\n  enrichKwargs: function (kwargs) {\n    if (kwargs.qs === undefined) {\n      kwargs.qs = {};\n    }\n\n    kwargs.qs['api_key'] = this.apiKey;\n    kwargs.json = true;\n    kwargs.headers = {};\n    kwargs.headers['stream-auth-type'] = 'jwt';\n    kwargs.headers.Authorization = this.token;\n    kwargs.headers['X-Stream-Client'] = this.userAgent();\n    kwargs.timeout = 10 * 1000; // 10 seconds\n    return kwargs;\n  },\n\n  post: function (kwargs, callback) {\n    kwargs = this.enrichKwargs(kwargs);\n    kwargs.method = 'POST';\n    return request(kwargs, callback);\n  },\n};\n\nmodule.exports = Client;\n"]},"metadata":{},"sourceType":"script"}