{"ast":null,"code":"// Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\nimport splitTags from './splitTags';\nexport default function (text, hits, options) {\n  var defaultHighlightTag = 'em';\n  hits = hits || [];\n  options = options || {};\n\n  if (hits.length === 0) {\n    return text;\n  }\n\n  var tagName = options.tag || defaultHighlightTag,\n      tags = [\"<\".concat(tagName, \">\"), \"</\".concat(tagName, \">\")],\n      chunks = splitTags(text),\n      i,\n      j,\n      result = '',\n      chunkIndex = 0,\n      chunk = chunks[0],\n      prevChunksLen = 0,\n      chunkCursor = 0,\n      startInChunk = false,\n      chunkChars = chunk,\n      flatHits = [],\n      index,\n      hit,\n      tag,\n      placed,\n      hitSpot;\n\n  for (i = 0; i < hits.length; i += 1) {\n    for (j = 0; j < hits[i].length; j += 1) {\n      flatHits.push(hits[i][j]);\n    }\n  }\n\n  for (index = 0; index < flatHits.length; index += 1) {\n    hit = flatHits[index];\n    tag = tags[index % 2];\n    placed = false;\n\n    while (chunk != null && hit >= prevChunksLen + chunk.length) {\n      result += chunkChars.slice(chunkCursor);\n\n      if (startInChunk && hit === prevChunksLen + chunkChars.length) {\n        result += tag;\n        placed = true;\n      }\n\n      if (chunks[chunkIndex + 1]) {\n        result += \"<\".concat(chunks[chunkIndex + 1], \">\");\n      }\n\n      prevChunksLen += chunkChars.length;\n      chunkCursor = 0;\n      chunkIndex += 2;\n      chunk = chunks[chunkIndex];\n      chunkChars = chunk;\n      startInChunk = false;\n    }\n\n    if (!placed && chunk != null) {\n      hitSpot = hit - prevChunksLen;\n      result += chunkChars.slice(chunkCursor, hitSpot) + tag;\n      chunkCursor = hitSpot;\n\n      if (index % 2 === 0) {\n        startInChunk = true;\n      } else {\n        startInChunk = false;\n      }\n    } else if (!placed) {\n      placed = true;\n      result += tag;\n    }\n  }\n\n  if (chunk != null) {\n    if (chunkCursor < chunkChars.length) {\n      result += chunkChars.slice(chunkCursor);\n    }\n\n    for (index = chunkIndex + 1; index < chunks.length; index += 1) {\n      result += index % 2 === 0 ? chunks[index] : \"<\".concat(chunks[index], \">\");\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/node_modules/twitter-text/dist/esm/hitHighlight.js"],"names":["splitTags","text","hits","options","defaultHighlightTag","length","tagName","tag","tags","concat","chunks","i","j","result","chunkIndex","chunk","prevChunksLen","chunkCursor","startInChunk","chunkChars","flatHits","index","hit","placed","hitSpot","push","slice"],"mappings":"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","sourcesContent":["// Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\nimport splitTags from './splitTags';\nexport default function (text, hits, options) {\n  var defaultHighlightTag = 'em';\n  hits = hits || [];\n  options = options || {};\n\n  if (hits.length === 0) {\n    return text;\n  }\n\n  var tagName = options.tag || defaultHighlightTag,\n      tags = [\"<\".concat(tagName, \">\"), \"</\".concat(tagName, \">\")],\n      chunks = splitTags(text),\n      i,\n      j,\n      result = '',\n      chunkIndex = 0,\n      chunk = chunks[0],\n      prevChunksLen = 0,\n      chunkCursor = 0,\n      startInChunk = false,\n      chunkChars = chunk,\n      flatHits = [],\n      index,\n      hit,\n      tag,\n      placed,\n      hitSpot;\n\n  for (i = 0; i < hits.length; i += 1) {\n    for (j = 0; j < hits[i].length; j += 1) {\n      flatHits.push(hits[i][j]);\n    }\n  }\n\n  for (index = 0; index < flatHits.length; index += 1) {\n    hit = flatHits[index];\n    tag = tags[index % 2];\n    placed = false;\n\n    while (chunk != null && hit >= prevChunksLen + chunk.length) {\n      result += chunkChars.slice(chunkCursor);\n\n      if (startInChunk && hit === prevChunksLen + chunkChars.length) {\n        result += tag;\n        placed = true;\n      }\n\n      if (chunks[chunkIndex + 1]) {\n        result += \"<\".concat(chunks[chunkIndex + 1], \">\");\n      }\n\n      prevChunksLen += chunkChars.length;\n      chunkCursor = 0;\n      chunkIndex += 2;\n      chunk = chunks[chunkIndex];\n      chunkChars = chunk;\n      startInChunk = false;\n    }\n\n    if (!placed && chunk != null) {\n      hitSpot = hit - prevChunksLen;\n      result += chunkChars.slice(chunkCursor, hitSpot) + tag;\n      chunkCursor = hitSpot;\n\n      if (index % 2 === 0) {\n        startInChunk = true;\n      } else {\n        startInChunk = false;\n      }\n    } else if (!placed) {\n      placed = true;\n      result += tag;\n    }\n  }\n\n  if (chunk != null) {\n    if (chunkCursor < chunkChars.length) {\n      result += chunkChars.slice(chunkCursor);\n    }\n\n    for (index = chunkIndex + 1; index < chunks.length; index += 1) {\n      result += index % 2 === 0 ? chunks[index] : \"<\".concat(chunks[index], \">\");\n    }\n  }\n\n  return result;\n}"]},"metadata":{},"sourceType":"module"}