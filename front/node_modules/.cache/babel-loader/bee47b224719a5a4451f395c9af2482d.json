{"ast":null,"code":"import \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.match\"; // Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n\nimport extractUrl from './regexp/extractUrl';\nimport invalidUrlWithoutProtocolPrecedingChars from './regexp/invalidUrlWithoutProtocolPrecedingChars';\nimport idna from './lib/idna';\nimport validAsciiDomain from './regexp/validAsciiDomain';\nimport validTcoUrl from './regexp/validTcoUrl';\nvar DEFAULT_PROTOCOL = 'https://';\nvar DEFAULT_PROTOCOL_OPTIONS = {\n  extractUrlsWithoutProtocol: true\n};\nvar MAX_URL_LENGTH = 4096;\nvar MAX_TCO_SLUG_LENGTH = 40;\n\nvar extractUrlsWithIndices = function extractUrlsWithIndices(text) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_PROTOCOL_OPTIONS;\n\n  if (!text || (options.extractUrlsWithoutProtocol ? !text.match(/\\./) : !text.match(/:/))) {\n    return [];\n  }\n\n  var urls = [];\n\n  var _loop = function _loop() {\n    var before = RegExp.$2;\n    var url = RegExp.$3;\n    var protocol = RegExp.$4;\n    var domain = RegExp.$5;\n    var path = RegExp.$7;\n    var endPosition = extractUrl.lastIndex;\n    var startPosition = endPosition - url.length;\n\n    if (!isValidUrl(url, protocol || DEFAULT_PROTOCOL, domain)) {\n      return \"continue\";\n    } // extract ASCII-only domains.\n\n\n    if (!protocol) {\n      if (!options.extractUrlsWithoutProtocol || before.match(invalidUrlWithoutProtocolPrecedingChars)) {\n        return \"continue\";\n      }\n\n      var lastUrl = null;\n      var asciiEndPosition = 0;\n      domain.replace(validAsciiDomain, function (asciiDomain) {\n        var asciiStartPosition = domain.indexOf(asciiDomain, asciiEndPosition);\n        asciiEndPosition = asciiStartPosition + asciiDomain.length;\n        lastUrl = {\n          url: asciiDomain,\n          indices: [startPosition + asciiStartPosition, startPosition + asciiEndPosition]\n        };\n        urls.push(lastUrl);\n      }); // no ASCII-only domain found. Skip the entire URL.\n\n      if (lastUrl == null) {\n        return \"continue\";\n      } // lastUrl only contains domain. Need to add path and query if they exist.\n\n\n      if (path) {\n        lastUrl.url = url.replace(domain, lastUrl.url);\n        lastUrl.indices[1] = endPosition;\n      }\n    } else {\n      // In the case of t.co URLs, don't allow additional path characters.\n      if (url.match(validTcoUrl)) {\n        var tcoUrlSlug = RegExp.$1;\n\n        if (tcoUrlSlug && tcoUrlSlug.length > MAX_TCO_SLUG_LENGTH) {\n          return \"continue\";\n        } else {\n          url = RegExp.lastMatch;\n          endPosition = startPosition + url.length;\n        }\n      }\n\n      urls.push({\n        url: url,\n        indices: [startPosition, endPosition]\n      });\n    }\n  };\n\n  while (extractUrl.exec(text)) {\n    var _ret = _loop();\n\n    if (_ret === \"continue\") continue;\n  }\n\n  return urls;\n};\n\nvar isValidUrl = function isValidUrl(url, protocol, domain) {\n  var urlLength = url.length;\n  var punycodeEncodedDomain = idna.toAscii(domain);\n\n  if (!punycodeEncodedDomain || !punycodeEncodedDomain.length) {\n    return false;\n  }\n\n  urlLength = urlLength + punycodeEncodedDomain.length - domain.length;\n  return protocol.length + urlLength <= MAX_URL_LENGTH;\n};\n\nexport default extractUrlsWithIndices;","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/node_modules/twitter-text/dist/esm/extractUrlsWithIndices.js"],"names":["extractUrl","invalidUrlWithoutProtocolPrecedingChars","idna","validAsciiDomain","validTcoUrl","DEFAULT_PROTOCOL","DEFAULT_PROTOCOL_OPTIONS","extractUrlsWithoutProtocol","MAX_URL_LENGTH","MAX_TCO_SLUG_LENGTH","extractUrlsWithIndices","text","options","arguments","length","undefined","match","urls","_loop","before","RegExp","$2","url","$3","protocol","$4","domain","$5","path","$7","endPosition","lastIndex","startPosition","isValidUrl","lastUrl","asciiEndPosition","replace","asciiDomain","asciiStartPosition","indexOf","indices","push","tcoUrlSlug","$1","lastMatch","exec","_ret","urlLength","punycodeEncodedDomain","toAscii"],"mappings":"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","sourcesContent":["import \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.match\";\n// Copyright 2018 Twitter, Inc.\n// Licensed under the Apache License, Version 2.0\n// http://www.apache.org/licenses/LICENSE-2.0\nimport extractUrl from './regexp/extractUrl';\nimport invalidUrlWithoutProtocolPrecedingChars from './regexp/invalidUrlWithoutProtocolPrecedingChars';\nimport idna from './lib/idna';\nimport validAsciiDomain from './regexp/validAsciiDomain';\nimport validTcoUrl from './regexp/validTcoUrl';\nvar DEFAULT_PROTOCOL = 'https://';\nvar DEFAULT_PROTOCOL_OPTIONS = {\n  extractUrlsWithoutProtocol: true\n};\nvar MAX_URL_LENGTH = 4096;\nvar MAX_TCO_SLUG_LENGTH = 40;\n\nvar extractUrlsWithIndices = function extractUrlsWithIndices(text) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_PROTOCOL_OPTIONS;\n\n  if (!text || (options.extractUrlsWithoutProtocol ? !text.match(/\\./) : !text.match(/:/))) {\n    return [];\n  }\n\n  var urls = [];\n\n  var _loop = function _loop() {\n    var before = RegExp.$2;\n    var url = RegExp.$3;\n    var protocol = RegExp.$4;\n    var domain = RegExp.$5;\n    var path = RegExp.$7;\n    var endPosition = extractUrl.lastIndex;\n    var startPosition = endPosition - url.length;\n\n    if (!isValidUrl(url, protocol || DEFAULT_PROTOCOL, domain)) {\n      return \"continue\";\n    } // extract ASCII-only domains.\n\n\n    if (!protocol) {\n      if (!options.extractUrlsWithoutProtocol || before.match(invalidUrlWithoutProtocolPrecedingChars)) {\n        return \"continue\";\n      }\n\n      var lastUrl = null;\n      var asciiEndPosition = 0;\n      domain.replace(validAsciiDomain, function (asciiDomain) {\n        var asciiStartPosition = domain.indexOf(asciiDomain, asciiEndPosition);\n        asciiEndPosition = asciiStartPosition + asciiDomain.length;\n        lastUrl = {\n          url: asciiDomain,\n          indices: [startPosition + asciiStartPosition, startPosition + asciiEndPosition]\n        };\n        urls.push(lastUrl);\n      }); // no ASCII-only domain found. Skip the entire URL.\n\n      if (lastUrl == null) {\n        return \"continue\";\n      } // lastUrl only contains domain. Need to add path and query if they exist.\n\n\n      if (path) {\n        lastUrl.url = url.replace(domain, lastUrl.url);\n        lastUrl.indices[1] = endPosition;\n      }\n    } else {\n      // In the case of t.co URLs, don't allow additional path characters.\n      if (url.match(validTcoUrl)) {\n        var tcoUrlSlug = RegExp.$1;\n\n        if (tcoUrlSlug && tcoUrlSlug.length > MAX_TCO_SLUG_LENGTH) {\n          return \"continue\";\n        } else {\n          url = RegExp.lastMatch;\n          endPosition = startPosition + url.length;\n        }\n      }\n\n      urls.push({\n        url: url,\n        indices: [startPosition, endPosition]\n      });\n    }\n  };\n\n  while (extractUrl.exec(text)) {\n    var _ret = _loop();\n\n    if (_ret === \"continue\") continue;\n  }\n\n  return urls;\n};\n\nvar isValidUrl = function isValidUrl(url, protocol, domain) {\n  var urlLength = url.length;\n  var punycodeEncodedDomain = idna.toAscii(domain);\n\n  if (!punycodeEncodedDomain || !punycodeEncodedDomain.length) {\n    return false;\n  }\n\n  urlLength = urlLength + punycodeEncodedDomain.length - domain.length;\n  return protocol.length + urlLength <= MAX_URL_LENGTH;\n};\n\nexport default extractUrlsWithIndices;"]},"metadata":{},"sourceType":"module"}