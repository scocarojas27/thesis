{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar StreamImageStore = /*#__PURE__*/function () {\n  function StreamImageStore(client, token) {\n    (0, _classCallCheck2.default)(this, StreamImageStore);\n    this.client = client;\n    this.token = token;\n  } // React Native does not auto-detect MIME type, you need to pass that via contentType\n  // param. If you don't then Android will refuse to perform the upload\n\n\n  (0, _createClass2.default)(StreamImageStore, [{\n    key: \"upload\",\n    value: function upload(uri, name, contentType, onUploadProgress) {\n      /**\n       * upload an Image File instance or a readable stream of data\n       * @param {File|Buffer|string} uri - File object or Buffer or URI\n       * @param {string} [name] - file name\n       * @param {string} [contentType] - mime-type\n       * @param {function} [onUploadProgress] - browser only, Function that is called with upload progress\n       * @return {Promise}\n       */\n      return this.client.upload('images/', uri, name, contentType, onUploadProgress);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(uri) {\n      return this.client.delete({\n        url: \"images/\",\n        qs: {\n          url: uri\n        },\n        signature: this.token\n      });\n    }\n  }, {\n    key: \"process\",\n    value: function process(uri, options) {\n      var params = (0, _extends2.default)(options, {\n        url: uri\n      });\n\n      if (Array.isArray(params.crop)) {\n        params.crop = params.crop.join(',');\n      }\n\n      return this.client.get({\n        url: \"images/\",\n        qs: params,\n        signature: this.token\n      });\n    }\n  }, {\n    key: \"thumbnail\",\n    value: function thumbnail(uri, w, h) {\n      var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n        crop: 'center',\n        resize: 'clip'\n      },\n          crop = _ref.crop,\n          resize = _ref.resize;\n\n      return this.process(uri, {\n        w: w,\n        h: h,\n        crop: crop,\n        resize: resize\n      });\n    }\n  }]);\n  return StreamImageStore;\n}();\n\nexports.default = StreamImageStore;","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/front/node_modules/getstream/lib/lib/images.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_extends2","_classCallCheck2","_createClass2","StreamImageStore","client","token","key","upload","uri","name","contentType","onUploadProgress","_delete","delete","url","qs","signature","process","options","params","Array","isArray","crop","join","get","thumbnail","w","h","_ref","arguments","length","undefined","resize"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar StreamImageStore = /*#__PURE__*/function () {\n  function StreamImageStore(client, token) {\n    (0, _classCallCheck2.default)(this, StreamImageStore);\n    this.client = client;\n    this.token = token;\n  } // React Native does not auto-detect MIME type, you need to pass that via contentType\n  // param. If you don't then Android will refuse to perform the upload\n\n\n  (0, _createClass2.default)(StreamImageStore, [{\n    key: \"upload\",\n    value: function upload(uri, name, contentType, onUploadProgress) {\n      /**\n       * upload an Image File instance or a readable stream of data\n       * @param {File|Buffer|string} uri - File object or Buffer or URI\n       * @param {string} [name] - file name\n       * @param {string} [contentType] - mime-type\n       * @param {function} [onUploadProgress] - browser only, Function that is called with upload progress\n       * @return {Promise}\n       */\n      return this.client.upload('images/', uri, name, contentType, onUploadProgress);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(uri) {\n      return this.client.delete({\n        url: \"images/\",\n        qs: {\n          url: uri\n        },\n        signature: this.token\n      });\n    }\n  }, {\n    key: \"process\",\n    value: function process(uri, options) {\n      var params = (0, _extends2.default)(options, {\n        url: uri\n      });\n\n      if (Array.isArray(params.crop)) {\n        params.crop = params.crop.join(',');\n      }\n\n      return this.client.get({\n        url: \"images/\",\n        qs: params,\n        signature: this.token\n      });\n    }\n  }, {\n    key: \"thumbnail\",\n    value: function thumbnail(uri, w, h) {\n      var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n        crop: 'center',\n        resize: 'clip'\n      },\n          crop = _ref.crop,\n          resize = _ref.resize;\n\n      return this.process(uri, {\n        w: w,\n        h: h,\n        crop: crop,\n        resize: resize\n      });\n    }\n  }]);\n  return StreamImageStore;\n}();\n\nexports.default = StreamImageStore;"]},"metadata":{},"sourceType":"script"}