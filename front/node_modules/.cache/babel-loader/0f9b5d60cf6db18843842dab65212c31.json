{"ast":null,"code":"'use strict';\n\nvar Class = require('../util/class'),\n    assign = require('../util/assign'),\n    Publisher = require('../mixins/publisher'),\n    Grammar = require('./grammar');\n\nvar Channel = Class({\n  initialize: function (name) {\n    this.id = this.name = name;\n  },\n  push: function (message) {\n    this.trigger('message', message);\n  },\n  isUnused: function () {\n    return this.countListeners('message') === 0;\n  }\n});\nassign(Channel.prototype, Publisher);\nassign(Channel, {\n  HANDSHAKE: '/meta/handshake',\n  CONNECT: '/meta/connect',\n  SUBSCRIBE: '/meta/subscribe',\n  UNSUBSCRIBE: '/meta/unsubscribe',\n  DISCONNECT: '/meta/disconnect',\n  META: 'meta',\n  SERVICE: 'service',\n  expand: function (name) {\n    var segments = this.parse(name),\n        channels = ['/**', name];\n    var copy = segments.slice();\n    copy[copy.length - 1] = '*';\n    channels.push(this.unparse(copy));\n\n    for (var i = 1, n = segments.length; i < n; i++) {\n      copy = segments.slice(0, i);\n      copy.push('**');\n      channels.push(this.unparse(copy));\n    }\n\n    return channels;\n  },\n  isValid: function (name) {\n    return Grammar.CHANNEL_NAME.test(name) || Grammar.CHANNEL_PATTERN.test(name);\n  },\n  parse: function (name) {\n    if (!this.isValid(name)) return null;\n    return name.split('/').slice(1);\n  },\n  unparse: function (segments) {\n    return '/' + segments.join('/');\n  },\n  isMeta: function (name) {\n    var segments = this.parse(name);\n    return segments ? segments[0] === this.META : null;\n  },\n  isService: function (name) {\n    var segments = this.parse(name);\n    return segments ? segments[0] === this.SERVICE : null;\n  },\n  isSubscribable: function (name) {\n    if (!this.isValid(name)) return null;\n    return !this.isMeta(name) && !this.isService(name);\n  },\n  Set: Class({\n    initialize: function () {\n      this._channels = {};\n    },\n    getKeys: function () {\n      var keys = [];\n\n      for (var key in this._channels) keys.push(key);\n\n      return keys;\n    },\n    remove: function (name) {\n      delete this._channels[name];\n    },\n    hasSubscription: function (name) {\n      return this._channels.hasOwnProperty(name);\n    },\n    subscribe: function (names, subscription) {\n      var name;\n\n      for (var i = 0, n = names.length; i < n; i++) {\n        name = names[i];\n        var channel = this._channels[name] = this._channels[name] || new Channel(name);\n        channel.bind('message', subscription);\n      }\n    },\n    unsubscribe: function (name, subscription) {\n      var channel = this._channels[name];\n      if (!channel) return false;\n      channel.unbind('message', subscription);\n\n      if (channel.isUnused()) {\n        this.remove(name);\n        return true;\n      } else {\n        return false;\n      }\n    },\n    distributeMessage: function (message) {\n      var channels = Channel.expand(message.channel);\n\n      for (var i = 0, n = channels.length; i < n; i++) {\n        var channel = this._channels[channels[i]];\n        if (channel) channel.trigger('message', message);\n      }\n    }\n  })\n});\nmodule.exports = Channel;","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/front/node_modules/faye/src/protocol/channel.js"],"names":["Class","require","assign","Publisher","Grammar","Channel","initialize","name","id","push","message","trigger","isUnused","countListeners","prototype","HANDSHAKE","CONNECT","SUBSCRIBE","UNSUBSCRIBE","DISCONNECT","META","SERVICE","expand","segments","parse","channels","copy","slice","length","unparse","i","n","isValid","CHANNEL_NAME","test","CHANNEL_PATTERN","split","join","isMeta","isService","isSubscribable","Set","_channels","getKeys","keys","key","remove","hasSubscription","hasOwnProperty","subscribe","names","subscription","channel","bind","unsubscribe","unbind","distributeMessage","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Class     = require('../util/class'),\n    assign    = require('../util/assign'),\n    Publisher = require('../mixins/publisher'),\n    Grammar   = require('./grammar');\n\nvar Channel = Class({\n  initialize: function(name) {\n    this.id = this.name = name;\n  },\n\n  push: function(message) {\n    this.trigger('message', message);\n  },\n\n  isUnused: function() {\n    return this.countListeners('message') === 0;\n  }\n});\n\nassign(Channel.prototype, Publisher);\n\nassign(Channel, {\n  HANDSHAKE:    '/meta/handshake',\n  CONNECT:      '/meta/connect',\n  SUBSCRIBE:    '/meta/subscribe',\n  UNSUBSCRIBE:  '/meta/unsubscribe',\n  DISCONNECT:   '/meta/disconnect',\n\n  META:         'meta',\n  SERVICE:      'service',\n\n  expand: function(name) {\n    var segments = this.parse(name),\n        channels = ['/**', name];\n\n    var copy = segments.slice();\n    copy[copy.length - 1] = '*';\n    channels.push(this.unparse(copy));\n\n    for (var i = 1, n = segments.length; i < n; i++) {\n      copy = segments.slice(0, i);\n      copy.push('**');\n      channels.push(this.unparse(copy));\n    }\n\n    return channels;\n  },\n\n  isValid: function(name) {\n    return Grammar.CHANNEL_NAME.test(name) ||\n           Grammar.CHANNEL_PATTERN.test(name);\n  },\n\n  parse: function(name) {\n    if (!this.isValid(name)) return null;\n    return name.split('/').slice(1);\n  },\n\n  unparse: function(segments) {\n    return '/' + segments.join('/');\n  },\n\n  isMeta: function(name) {\n    var segments = this.parse(name);\n    return segments ? (segments[0] === this.META) : null;\n  },\n\n  isService: function(name) {\n    var segments = this.parse(name);\n    return segments ? (segments[0] === this.SERVICE) : null;\n  },\n\n  isSubscribable: function(name) {\n    if (!this.isValid(name)) return null;\n    return !this.isMeta(name) && !this.isService(name);\n  },\n\n  Set: Class({\n    initialize: function() {\n      this._channels = {};\n    },\n\n    getKeys: function() {\n      var keys = [];\n      for (var key in this._channels) keys.push(key);\n      return keys;\n    },\n\n    remove: function(name) {\n      delete this._channels[name];\n    },\n\n    hasSubscription: function(name) {\n      return this._channels.hasOwnProperty(name);\n    },\n\n    subscribe: function(names, subscription) {\n      var name;\n      for (var i = 0, n = names.length; i < n; i++) {\n        name = names[i];\n        var channel = this._channels[name] = this._channels[name] || new Channel(name);\n        channel.bind('message', subscription);\n      }\n    },\n\n    unsubscribe: function(name, subscription) {\n      var channel = this._channels[name];\n      if (!channel) return false;\n      channel.unbind('message', subscription);\n\n      if (channel.isUnused()) {\n        this.remove(name);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    distributeMessage: function(message) {\n      var channels = Channel.expand(message.channel);\n\n      for (var i = 0, n = channels.length; i < n; i++) {\n        var channel = this._channels[channels[i]];\n        if (channel) channel.trigger('message', message);\n      }\n    }\n  })\n});\n\nmodule.exports = Channel;\n"]},"metadata":{},"sourceType":"script"}