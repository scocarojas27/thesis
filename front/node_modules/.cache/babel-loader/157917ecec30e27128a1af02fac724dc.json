{"ast":null,"code":"(function (f) {\n  'use strict';\n  /* istanbul ignore else */\n\n  if (typeof exports === 'object' && exports != null && typeof exports.nodeType !== 'number') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    var base64 = f();\n    var global = typeof self !== 'undefined' ? self : $.global;\n    if (typeof global.btoa !== 'function') global.btoa = base64.btoa;\n    if (typeof global.atob !== 'function') global.atob = base64.atob;\n  }\n})(function () {\n  'use strict';\n\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  function InvalidCharacterError(message) {\n    this.message = message;\n  }\n\n  InvalidCharacterError.prototype = new Error();\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError'; // encoder\n  // [https://gist.github.com/999166] by [https://github.com/nignag]\n\n  function btoa(input) {\n    var str = String(input);\n\n    for ( // initialize result and counter\n    var block, charCode, idx = 0, map = chars, output = ''; // if the next str index does not exist:\n    //   change the mapping table to \"=\"\n    //   check if d has no fractional digits\n    str.charAt(idx | 0) || (map = '=', idx % 1); // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n    output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {\n      charCode = str.charCodeAt(idx += 3 / 4);\n\n      if (charCode > 0xFF) {\n        throw new InvalidCharacterError(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n\n      block = block << 8 | charCode;\n    }\n\n    return output;\n  } // decoder\n  // [https://gist.github.com/1020396] by [https://github.com/atk]\n\n\n  function atob(input) {\n    var str = String(input).replace(/[=]+$/, ''); // #31: ExtendScript bad parse of /=\n\n    if (str.length % 4 === 1) {\n      throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n\n    for ( // initialize result and counters\n    var bc = 0, bs, buffer, idx = 0, output = ''; // get next character\n    buffer = str.charAt(idx++); // eslint-disable-line no-cond-assign\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, // and if not first of each 4 characters,\n    // convert the first 8 bits to one ascii character\n    bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n\n    return output;\n  }\n\n  return {\n    btoa: btoa,\n    atob: atob\n  };\n});","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/front/node_modules/Base64/base64.js"],"names":["f","exports","nodeType","module","define","amd","base64","global","self","$","btoa","atob","chars","InvalidCharacterError","message","prototype","Error","name","input","str","String","block","charCode","idx","map","output","charAt","charCodeAt","replace","length","bc","bs","buffer","fromCharCode","indexOf"],"mappings":"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","sourcesContent":["(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof exports === 'object' && exports != null &&\n      typeof exports.nodeType !== 'number') {\n    module.exports = f ();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define ([], f);\n  } else {\n    var base64 = f ();\n    var global = typeof self !== 'undefined' ? self : $.global;\n    if (typeof global.btoa !== 'function') global.btoa = base64.btoa;\n    if (typeof global.atob !== 'function') global.atob = base64.atob;\n  }\n\n} (function() {\n\n  'use strict';\n\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  function InvalidCharacterError(message) {\n    this.message = message;\n  }\n  InvalidCharacterError.prototype = new Error ();\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n  // encoder\n  // [https://gist.github.com/999166] by [https://github.com/nignag]\n  function btoa(input) {\n    var str = String (input);\n    for (\n      // initialize result and counter\n      var block, charCode, idx = 0, map = chars, output = '';\n      // if the next str index does not exist:\n      //   change the mapping table to \"=\"\n      //   check if d has no fractional digits\n      str.charAt (idx | 0) || (map = '=', idx % 1);\n      // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n      output += map.charAt (63 & block >> 8 - idx % 1 * 8)\n    ) {\n      charCode = str.charCodeAt (idx += 3 / 4);\n      if (charCode > 0xFF) {\n        throw new InvalidCharacterError (\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n      block = block << 8 | charCode;\n    }\n    return output;\n  }\n\n  // decoder\n  // [https://gist.github.com/1020396] by [https://github.com/atk]\n  function atob(input) {\n    var str = (String (input)).replace (/[=]+$/, ''); // #31: ExtendScript bad parse of /=\n    if (str.length % 4 === 1) {\n      throw new InvalidCharacterError (\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n    for (\n      // initialize result and counters\n      var bc = 0, bs, buffer, idx = 0, output = '';\n      // get next character\n      buffer = str.charAt (idx++); // eslint-disable-line no-cond-assign\n      // character found in table? initialize bit storage and add its ascii value;\n      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n        // and if not first of each 4 characters,\n        // convert the first 8 bits to one ascii character\n        bc++ % 4) ? output += String.fromCharCode (255 & bs >> (-2 * bc & 6)) : 0\n    ) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf (buffer);\n    }\n    return output;\n  }\n\n  return {btoa: btoa, atob: atob};\n\n}));\n"]},"metadata":{},"sourceType":"script"}