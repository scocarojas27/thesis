{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeName = undefined;\nexports.parse = parse;\nexports.toCodePoints = toCodePoints;\n\nvar _regex = require('./lib/regex');\n\nvar _regex2 = _interopRequireDefault(_regex);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar TypeName = exports.TypeName = 'emoji'; // Copyright Twitter Inc. Licensed under MIT\n// https://github.com/twitter/twemoji-parser/blob/master/LICENSE.md\n\nfunction parse(text, options) {\n  var assetType = options && options.assetType ? options.assetType : 'svg';\n  var getTwemojiUrl = options && options.buildUrl ? options.buildUrl : function (codepoints, assetType) {\n    return assetType === 'png' ? 'https://twemoji.maxcdn.com/2/72x72/' + codepoints + '.png' : 'https://twemoji.maxcdn.com/2/svg/' + codepoints + '.svg';\n  };\n  var entities = [];\n  _regex2.default.lastIndex = 0;\n\n  while (true) {\n    var result = _regex2.default.exec(text);\n\n    if (!result) {\n      break;\n    }\n\n    var emojiText = result[0];\n    var codepoints = toCodePoints(removeVS16s(emojiText)).join('-');\n    entities.push({\n      url: codepoints ? getTwemojiUrl(codepoints, assetType) : '',\n      indices: [result.index, _regex2.default.lastIndex],\n      text: emojiText,\n      type: TypeName\n    });\n  }\n\n  return entities;\n}\n\nvar vs16RegExp = /\\uFE0F/g; // avoid using a string literal like '\\u200D' here because minifiers expand it inline\n\nvar zeroWidthJoiner = String.fromCharCode(0x200d);\n\nvar removeVS16s = function removeVS16s(rawEmoji) {\n  return rawEmoji.indexOf(zeroWidthJoiner) < 0 ? rawEmoji.replace(vs16RegExp, '') : rawEmoji;\n};\n\nfunction toCodePoints(unicodeSurrogates) {\n  var points = [];\n  var char = 0;\n  var previous = 0;\n  var i = 0;\n\n  while (i < unicodeSurrogates.length) {\n    char = unicodeSurrogates.charCodeAt(i++);\n\n    if (previous) {\n      points.push((0x10000 + (previous - 0xd800 << 10) + (char - 0xdc00)).toString(16));\n      previous = 0;\n    } else if (char > 0xd800 && char <= 0xdbff) {\n      previous = char;\n    } else {\n      points.push(char.toString(16));\n    }\n  }\n\n  return points;\n}","map":{"version":3,"sources":["/home/scocarojas/Documents/prototype/node_modules/twemoji-parser/dist/index.js"],"names":["Object","defineProperty","exports","value","TypeName","undefined","parse","toCodePoints","_regex","require","_regex2","_interopRequireDefault","obj","__esModule","default","text","options","assetType","getTwemojiUrl","buildUrl","codepoints","entities","lastIndex","result","exec","emojiText","removeVS16s","join","push","url","indices","index","type","vs16RegExp","zeroWidthJoiner","String","fromCharCode","rawEmoji","indexOf","replace","unicodeSurrogates","points","char","previous","i","length","charCodeAt","toString"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeName = undefined;\nexports.parse = parse;\nexports.toCodePoints = toCodePoints;\n\nvar _regex = require('./lib/regex');\n\nvar _regex2 = _interopRequireDefault(_regex);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar TypeName = exports.TypeName = 'emoji';\n// Copyright Twitter Inc. Licensed under MIT\n// https://github.com/twitter/twemoji-parser/blob/master/LICENSE.md\nfunction parse(text, options) {\n  var assetType = options && options.assetType ? options.assetType : 'svg';\n  var getTwemojiUrl = options && options.buildUrl ? options.buildUrl : function (codepoints, assetType) {\n    return assetType === 'png' ? 'https://twemoji.maxcdn.com/2/72x72/' + codepoints + '.png' : 'https://twemoji.maxcdn.com/2/svg/' + codepoints + '.svg';\n  };\n\n  var entities = [];\n\n  _regex2.default.lastIndex = 0;\n  while (true) {\n    var result = _regex2.default.exec(text);\n    if (!result) {\n      break;\n    }\n\n    var emojiText = result[0];\n    var codepoints = toCodePoints(removeVS16s(emojiText)).join('-');\n\n    entities.push({\n      url: codepoints ? getTwemojiUrl(codepoints, assetType) : '',\n      indices: [result.index, _regex2.default.lastIndex],\n      text: emojiText,\n      type: TypeName\n    });\n  }\n  return entities;\n}\n\nvar vs16RegExp = /\\uFE0F/g;\n// avoid using a string literal like '\\u200D' here because minifiers expand it inline\nvar zeroWidthJoiner = String.fromCharCode(0x200d);\n\nvar removeVS16s = function removeVS16s(rawEmoji) {\n  return rawEmoji.indexOf(zeroWidthJoiner) < 0 ? rawEmoji.replace(vs16RegExp, '') : rawEmoji;\n};\n\nfunction toCodePoints(unicodeSurrogates) {\n  var points = [];\n  var char = 0;\n  var previous = 0;\n  var i = 0;\n  while (i < unicodeSurrogates.length) {\n    char = unicodeSurrogates.charCodeAt(i++);\n    if (previous) {\n      points.push((0x10000 + (previous - 0xd800 << 10) + (char - 0xdc00)).toString(16));\n      previous = 0;\n    } else if (char > 0xd800 && char <= 0xdbff) {\n      previous = char;\n    } else {\n      points.push(char.toString(16));\n    }\n  }\n  return points;\n}"]},"metadata":{},"sourceType":"script"}